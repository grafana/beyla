name: Alloy Mapped Fields Checker

on:
  workflow_dispatch:

# Set restrictive permissions at workflow level
permissions:
  contents: read

jobs:
  check-config:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      with:
        persist-credentials: 'false'
    - name: Set up Go
      uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5
      with:
        go-version-file: 'go.mod'
        cache: false  # Disable caching to avoid extraction conflicts
        check-latest: true

    - name: Run alloy field checker
      id: field-checker
      run: |
        # First compile the checker to ensure it builds
        cd tools/alloy-field-checker
        go build -o field-checker
        if [ $? -ne 0 ]; then
          echo "Failed to build field checker"
          exit 1
        fi
        
        # Move back to workspace root and run the checker
        cd ../..
        if [ ! -d "pkg" ]; then
          echo "pkg directory not found in $(pwd)"
          ls -la
          exit 1
        fi
        
        tools/alloy-field-checker/field-checker 2>&1 | tee output.txt
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
          # Create a normalized version of the output (remove line numbers which can change)
          grep "unmapped fields:" output.txt > /dev/null && {
            echo "has_unmapped=true" >> $GITHUB_OUTPUT
            echo "unmapped_fields<<EOF" >> $GITHUB_OUTPUT
            # Extract just the field names and struct names, ignore line numbers
            grep -o "[a-zA-Z0-9]\+\.[a-zA-Z0-9]\+ (tag: [^)]\+)" output.txt | sort > normalized_output.txt
            cat normalized_output.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          } || {
            echo "has_unmapped=false" >> $GITHUB_OUTPUT
          }
        else
          echo "has_unmapped=false" >> $GITHUB_OUTPUT
        fi

    - name: Manage issues
      if: always() # Always run this step to ensure proper issue management
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      with:
        script: |
          // Find if there's an existing issue
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: []
          });
          
          console.log(`Found ${issues.data.length} open issues in the repo`);
          
          const existingIssue = issues.data.find(issue => 
            issue.title === 'Map missing Beyla options in Alloy component'
          );
          
          if (existingIssue) {
            console.log(`Found existing issue #${existingIssue.number}`);
          } else {
            console.log('No existing issue found');
          }
          
          // Check if we have unmapped fields
          const hasUnmapped = '${{ steps.field-checker.outputs.has_unmapped }}' === 'true';
          console.log(`Has unmapped fields: ${hasUnmapped}`);
          
          if (hasUnmapped) {
            // We have unmapped fields, either update or create an issue
            const issueBody = `Unmapped configuration fields were detected in Beyla's Alloy component:

            \`\`\`
            ${{ steps.field-checker.outputs.unmapped_fields }}
            \`\`\`

            Please ensure all configuration fields are properly mapped in the Alloy configuration.
            
            This issue was automatically generated by the config-checker workflow.`;
            
            if (existingIssue) {
              // Update existing issue
              console.log(`Updating existing issue #${existingIssue.number}`);
              try {
                const updateResult = await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: issueBody,
                  labels: ['automated', 'config']
                });
                console.log(`Issue updated successfully`);
              } catch (error) {
                console.error(`Error updating issue: ${error.message}`);
                throw error;
              }
            } else {
              // Create new issue
              console.log('Creating new issue');
              try {
                const createResult = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: 'Map missing Beyla options in Alloy component',
                  body: issueBody,
                  labels: ['automated', 'config']
                });
                console.log(`Issue created successfully with number: ${createResult.data.number}`);
              } catch (error) {
                console.error(`Error creating issue: ${error.message}`);
                throw error;
              }
            }
          } else if (existingIssue) {
            // No unmapped fields but we have an existing issue - close it
            console.log(`Closing issue #${existingIssue.number} as all fields are now mapped`);
            try {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                state: 'closed',
                state_reason: 'completed'
              });
              console.log('Issue closed successfully');
            } catch (error) {
              console.error(`Error closing issue: ${error.message}`);
              throw error;
            }
          } else {
            // No unmapped fields and no existing issue - nothing to do
            console.log('No unmapped fields and no existing issue - nothing to do');
          }