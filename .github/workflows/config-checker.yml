name: Config Field Checker

on:
  push:
    branches: [ main ]
    paths:
      - 'pkg/**/*.go'
  pull_request:
    branches: [ main ]
    paths:
      - 'pkg/**/*.go'

jobs:
  check-config:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Run alloy field checker
      id: field-checker
      run: |
        cd tools/alloy-field-checker
        go run main.go 2>&1 | tee output.txt
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
          # Create a normalized version of the output (remove line numbers which can change)
          grep "unmapped fields:" output.txt > /dev/null && {
            echo "has_unmapped=true" >> $GITHUB_OUTPUT
            echo "unmapped_fields<<EOF" >> $GITHUB_OUTPUT
            # Extract just the field names and struct names, ignore line numbers
            grep -o "[a-zA-Z0-9]\+\.[a-zA-Z0-9]\+ (tag: [^)]\+)" output.txt | sort > normalized_output.txt
            cat normalized_output.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            # Create a hash of the normalized output for comparison
            echo "output_hash=$(sha256sum normalized_output.txt | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          } || {
            echo "has_unmapped=false" >> $GITHUB_OUTPUT
          }
        else
          echo "has_unmapped=false" >> $GITHUB_OUTPUT
        fi

    - name: Find existing issues
      if: steps.field-checker.outputs.has_unmapped == 'true'
      uses: actions/github-script@v7
      id: find-issue
      with:
        script: |
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: ['config-check']
          });
          const existingIssue = issues.data.find(issue => 
            issue.title === 'Unmapped Configuration Fields Detected'
          );
          if (existingIssue) {
            // Extract the hash from the existing issue if it exists
            const hashMatch = existingIssue.body.match(/<!-- hash: ([a-f0-9]+) -->/);
            const existingHash = hashMatch ? hashMatch[1] : '';
            return JSON.stringify({
              number: existingIssue.number,
              hash: existingHash
            });
          }
          return JSON.stringify({
            number: 0,
            hash: ''
          });
        result-encoding: string

    - name: Manage issue
      if: |
        steps.field-checker.outputs.has_unmapped == 'true' && 
        (github.event_name == 'push' || !fromJson(steps.find-issue.outputs.result).number)
      uses: actions/github-script@v7
      with:
        script: |
          const issueInfo = JSON.parse('${{ steps.find-issue.outputs.result }}');
          const newHash = '${{ steps.field-checker.outputs.output_hash }}';
          
          // Only update if the hash has changed or there's no existing issue
          if (issueInfo.hash !== newHash || !issueInfo.number) {
            const issueBody = `Unmapped configuration fields were detected:

          \`\`\`
          ${process.env.UNMAPPED_FIELDS}
          \`\`\`

          Please ensure all configuration fields are properly mapped in the Alloy configuration.
          
          This issue was automatically generated by the config-checker workflow.
          <!-- hash: ${newHash} -->`;

            if (issueInfo.number > 0) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueInfo.number,
                body: issueBody
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Unmapped Configuration Fields Detected',
                body: issueBody,
                labels: ['config-check']
              });
            }
          }
      env:
        UNMAPPED_FIELDS: ${{ steps.field-checker.outputs.unmapped_fields }}

    - name: Close issue if no unmapped fields
      if: steps.field-checker.outputs.has_unmapped == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: ['config-check']
          });
          
          const existingIssue = issues.data.find(issue => 
            issue.title === 'Unmapped Configuration Fields Detected'
          );
          
          if (existingIssue) {
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              state: 'closed',
              state_reason: 'completed'
            });
          } 