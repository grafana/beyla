name: Generate Binaries

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag to generate eBPF and Java agent binaries for'
        required: true
        type: string

jobs:
  generate-binaries:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name || github.event.inputs.tag_name }}
          fetch-depth: 0

      - name: Configure Git
        env:
          RELEASE_TAG: ${{ github.event.release.tag_name || github.event.inputs.tag_name }}
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions"

      - name: Generate eBPF binaries
        run: make docker-generate
        
      - name: Generate Java agent
        run: |
          cd pkg/internal/otelsdk
          go generate
          cd -

      - name: Force add generated binaries
        run: |
          # Force add the binary files that might be gitignored
          find . -name "*_bpfel.o" -type f -exec git add -f {} \;
          find . -name "*_bpfel.go" -type f -exec git add -f {} \;
          find . -name "grafana-opentelemetry-java.jar" -type f -exec git add -f {} \;
          
          # If no changes, create a dummy file to verify workflow execution
          if [[ -z $(git status --porcelain) ]]; then
            echo "No changes detected in binary files"
          fi

      - name: Commit and push generated binaries
        env:
          RELEASE_TAG: ${{ github.event.release.tag_name || github.event.inputs.tag_name }}
        run: |
          # Only commit if there are changes to commit
          if ! git diff --staged --quiet; then
            git commit -m "chore: generate binaries (eBPF and Java agent) for release ${RELEASE_TAG}"
            
            # Try to determine the source branch for this tag and trim whitespace properly
            target_branch=$(git branch -r --contains "tags/${RELEASE_TAG}" | grep -v HEAD | head -n 1 | sed 's/origin\///' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

            # Fail the workflow if no valid branch is found
            if [[ -z "$target_branch" ]]; then
              echo "Error: No valid branch found for tag ${RELEASE_TAG}" >&2
              exit 1
            fi

            echo "Attempting to push changes to branch: '${target_branch}'"
            
            if git push origin HEAD:${target_branch}; then
              echo "Successfully pushed changes to ${target_branch}"
            else
              echo "Direct push failed - creating separate branch"
              safe_tag=$(echo "${RELEASE_TAG}" | sed 's/[^a-zA-Z0-9._-]/-/g')
              branch_name="update-binaries-for-${safe_tag}"
              git checkout -b "${branch_name}"
              git push -u origin "${branch_name}"
              echo "Created branch ${branch_name} with changes"
            fi
          else
            echo "No changes to commit"
          fi
