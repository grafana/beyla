name: Port PRs to Upstream OTel eBPF Instrumentation

on:
  pull_request:
    types: [labeled]
  workflow_dispatch:
    inputs:
      pr_numbers:
        description: 'Comma-separated list of PR numbers to port (leave empty to use labeled PRs)'
        required: false
        default: ''

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  port-to-upstream:
    runs-on: ubuntu-latest
    # Run this job when a PR is labeled or manually triggered
    if: |
      (github.event_name == 'pull_request' && github.event.action == 'labeled' && github.event.label.name == 'port-to-upstream') ||
      github.event_name == 'workflow_dispatch'
    steps:
      - name: Get secrets from Vault
        id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@main
        with:
          repo_secrets: |
            GITHUB_APP_ID=github-app:app-id
            GITHUB_APP_INSTALLATION_ID=github-app:app-installation-id
            GITHUB_APP_PRIVATE_KEY=github-app:private-key
            
      - name: Checkout Beyla
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate App Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ env.GITHUB_APP_ID }}
          private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}
          installation-id: ${{ env.GITHUB_APP_INSTALLATION_ID }}
          owner: grafana
          repositories: "opentelemetry-ebpf-instrumentation"
          permission-contents: write
          
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: grafana/opentelemetry-ebpf-instrumentation
          token: ${{ steps.app-token.outputs.token }}
          path: opentelemetry-ebpf-instrumentation
          
      - name: Port current PR to upstream
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          # Get the current PR number
          PR_NUM=${{ github.event.pull_request.number }}
          
          echo "================================================================"
          echo "Processing current PR #${PR_NUM}"
          echo "================================================================"
          
          # Extract PR information
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          
          echo "PR Title: $PR_TITLE"
          echo "PR URL: $PR_URL"
          
          # Create branch name for this port
          BRANCH_NAME="port/${PR_NUM}-to-upstream"
          
          # Get the base and head SHAs
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          echo "PR Base SHA: $BASE_SHA"
          echo "PR Head SHA: $HEAD_SHA"
          
          # Get the list of changed files excluding vendor and license files
          CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA | grep -v "vendor/" | grep -v "LICENSE" | grep -v "third_party_licenses.csv" || echo "")
          
          # Check if there are any relevant files to port
          if [ -z "${CHANGED_FILES}" ]; then
            echo "No relevant files changed in this PR. Nothing to port."
            exit 0
          fi
          
          echo "Files to port:"
          echo "${CHANGED_FILES}"
          
          # Create a full diff excluding vendor files
          git diff $BASE_SHA $HEAD_SHA -- ${CHANGED_FILES} > current-pr.patch
          
          # Navigate to target repository
          cd opentelemetry-ebpf-instrumentation
          
          # Create and checkout a branch
          git checkout -b ${BRANCH_NAME} 2>/dev/null || git checkout ${BRANCH_NAME}
          git reset --hard origin/main
          
          # Apply the patch with reject files
          echo "Applying patch..."
          git apply --whitespace=fix --reject ../current-pr.patch || true
          
          # Find reject files
          REJ_FILES=$(find . -name "*.rej")
          REJECTED=false
          
          # Handle reject files
          if [ ! -z "$REJ_FILES" ]; then
            REJECTED=true
            echo "Reject files created:"
            echo "$REJ_FILES"
            
            # Copy reject files to the rejects directory
            mkdir -p ../reject_files/pr-${PR_NUM}
            find . -name "*.rej" -exec cp --parents {} ../reject_files/pr-${PR_NUM}/ \;
            
            # Remove reject files from the working directory
            find . -name "*.rej" -exec rm {} \;
          fi
          
          # Check if there are any changes to commit
          if ! git diff --quiet || ! git diff --staged --quiet; then
            # Add all changes
            git add .
            
            # Create commit message
            COMMIT_MSG="[port] #${PR_NUM}: ${PR_TITLE}

Automated port of #${PR_NUM} from grafana/beyla.
Original PR: ${PR_URL}"

            # Add note about rejects if any
            if [ "$REJECTED" = true ]; then
              COMMIT_MSG+="

Note: Some changes couldn't be applied automatically and have been saved as reject files.
Manual intervention is required to complete the port."
            fi
            
            # Commit changes
            git commit -m "$COMMIT_MSG"
            
            # Push branch to upstream
            echo "Pushing branch ${BRANCH_NAME}..."
            git push origin ${BRANCH_NAME} --force
            
            echo "Successfully pushed branch ${BRANCH_NAME}."
          else
            echo "No changes to commit."
          fi
          
          # Report status
          echo "================================================================"
          echo "Port attempt completed for PR #${PR_NUM}"
          echo "================================================================"
          
      - name: Upload reject files
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: reject-files
          path: reject_files/
          if-no-files-found: ignore
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          PR_NUM: ${{ github.event.pull_request.number }}
        run: |
          BRANCH_NAME="port/${PR_NUM}-to-upstream"
          
          # Check if reject files exist
          if [ -d "reject_files/pr-${PR_NUM}" ]; then
            # Create comment about reject files and manual attention needed
            COMMENT="üîÑ Ported changes to branch [\`$BRANCH_NAME\`](https://github.com/grafana/opentelemetry-ebpf-instrumentation/tree/$BRANCH_NAME) in grafana/opentelemetry-ebpf-instrumentation.

‚ö†Ô∏è Some changes couldn't be applied automatically. See the workflow run for details and download the reject files artifact."
          else
            # Create success comment
            COMMENT="‚úÖ Successfully ported changes to branch [\`$BRANCH_NAME\`](https://github.com/grafana/opentelemetry-ebpf-instrumentation/tree/$BRANCH_NAME) in grafana/opentelemetry-ebpf-instrumentation."
          fi
          
          # Add the comment to the PR
          gh pr comment $PR_NUM --repo grafana/beyla --body "$COMMENT"
