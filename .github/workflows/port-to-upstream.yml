name: Port PRs to Upstream OTel eBPF Instrumentation

on:
  pull_request:
    types: [labeled]
  workflow_dispatch:
    inputs:
      pr_numbers:
        description: 'Comma-separated list of PR numbers to port (leave empty to use labeled PRs)'
        required: false
        default: ''

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  port-to-upstream:
    runs-on: ubuntu-latest
    steps:
      - name: Get secrets from Vault
        id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@main
        with:
          repo_secrets: |
            GITHUB_APP_ID=github-app:app-id
            GITHUB_APP_INSTALLATION_ID=github-app:app-installation-id
            GITHUB_APP_PRIVATE_KEY=github-app:private-key
            
      - name: Checkout Beyla
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate App Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ env.GITHUB_APP_ID }}
          private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}
          installation-id: ${{ env.GITHUB_APP_INSTALLATION_ID }}
          owner: grafana
          repositories: "opentelemetry-ebpf-instrumentation"
          permission-contents: write
          
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: grafana/opentelemetry-ebpf-instrumentation
          token: ${{ steps.app-token.outputs.token }}
          path: opentelemetry-ebpf-instrumentation
          
      - name: Port PRs to upstream
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          # Find all PRs with the port-to-upstream label
          echo "Finding PRs with port-to-upstream label..."
          LABELED_PRS=$(gh pr list --repo grafana/beyla --label "port-to-upstream" --json number,title,url --jq '.[].number')
          
          if [ -z "$LABELED_PRS" ]; then
            echo "No PRs found with port-to-upstream label."
            exit 0
          fi
          
          # Convert to array
          PR_NUMBERS=($LABELED_PRS)
          
          echo "Found PRs to process: ${PR_NUMBERS[@]}"
          
          # Create a directory for reject files
          mkdir -p reject_files
          
          # Process each PR
          for PR_NUM in "${PR_NUMBERS[@]}"; do
            echo "================================================================"
            echo "Processing PR #${PR_NUM}"
            echo "================================================================"
            
            # Try to fetch PR info, if it fails, skip this PR
            if ! PR_INFO=$(gh pr view ${PR_NUM} --repo grafana/beyla --json title,url,baseRefName,headRefName,headRepositoryOwner,headRepository,state 2>/dev/null); then
              echo "Could not fetch PR #${PR_NUM}. Skipping."
              continue
            fi
            
            # Extract PR information
            PR_TITLE=$(echo "$PR_INFO" | jq -r '.title')
            PR_URL=$(echo "$PR_INFO" | jq -r '.url')
            PR_BASE_BRANCH=$(echo "$PR_INFO" | jq -r '.baseRefName')
            PR_HEAD_BRANCH=$(echo "$PR_INFO" | jq -r '.headRefName')
            PR_STATE=$(echo "$PR_INFO" | jq -r '.state')
            
            echo "PR Title: $PR_TITLE"
            echo "PR URL: $PR_URL"
            echo "PR State: $PR_STATE"
            
            # Skip closed PRs that are not merged
            if [ "$PR_STATE" == "CLOSED" ]; then
              echo "PR is closed. Skipping."
              continue
            fi
            
            # Create branch name for this port
            BRANCH_NAME="port/${PR_NUM}-to-upstream"
            
            # Try to fetch the PR branch, continue if it fails
            if ! git fetch origin pull/${PR_NUM}/head:pr-${PR_NUM} 2>/dev/null; then
              echo "Could not fetch PR branch for #${PR_NUM}. Skipping."
              continue
            fi
            
            # Checkout the PR branch
            git checkout pr-${PR_NUM}
            
            # Get the base and head SHAs
            TARGET_BASE_SHA=$(git merge-base origin/${PR_BASE_BRANCH} pr-${PR_NUM})
            TARGET_HEAD_SHA=$(git rev-parse HEAD)
            
            echo "PR Base SHA: $TARGET_BASE_SHA"
            echo "PR Head SHA: $TARGET_HEAD_SHA"
            
            # Get the list of changed files excluding vendor and license files
            CHANGED_FILES=$(git diff --name-only ${TARGET_BASE_SHA} ${TARGET_HEAD_SHA} | grep -v "vendor/" | grep -v "LICENSE" | grep -v "third_party_licenses.csv")
            
            # Check if there are any relevant files to port
            if [ -z "${CHANGED_FILES}" ]; then
              echo "No relevant files changed in PR #${PR_NUM}. Skipping."
              continue
            fi
            
            echo "Files to port:"
            echo "${CHANGED_FILES}"
            
            # Create a full diff excluding vendor files
            git diff ${TARGET_BASE_SHA} ${TARGET_HEAD_SHA} -- ${CHANGED_FILES} > pr-${PR_NUM}.patch
            
            # Filter out any binary files or files that might cause issues
            grep -l "^Binary files" pr-${PR_NUM}.patch | xargs -r sed -i '/^Binary files/d' pr-${PR_NUM}.patch
            
            # Navigate to target repository
            cd opentelemetry-ebpf-instrumentation
            
            # Try to create and checkout a branch, continue if it fails
            if ! git checkout -b ${BRANCH_NAME} 2>/dev/null; then
              echo "Branch ${BRANCH_NAME} already exists or could not be created. Trying to reset it."
              if ! git checkout ${BRANCH_NAME} 2>/dev/null; then
                echo "Could not checkout branch ${BRANCH_NAME}. Skipping."
                cd ..
                continue
              fi
              # Reset branch to match upstream main
              git reset --hard origin/main
            fi
            
            # Apply the patch with reject files
            echo "Applying patch for PR #${PR_NUM}..."
            git apply --whitespace=fix --reject ../pr-${PR_NUM}.patch || true
            
            # Find reject files
            REJ_FILES=$(find . -name "*.rej")
            REJECTED=false
            
            # Create a directory for this PR's rejects
            if [ ! -z "$REJ_FILES" ]; then
              REJECTED=true
              echo "Reject files created for PR #${PR_NUM}:"
              echo "$REJ_FILES"
              
              # Copy reject files to the rejects directory
              mkdir -p ../reject_files/pr-${PR_NUM}
              find . -name "*.rej" -exec cp --parents {} ../reject_files/pr-${PR_NUM}/ \;
              
              # Remove reject files from the working directory
              find . -name "*.rej" -exec rm {} \;
            fi
            
            # Check if there are any changes to commit
            if ! git diff --quiet || ! git diff --staged --quiet; then
              # Add all changes
              git add .
              
              # Create commit message
              COMMIT_MSG="[port] #${PR_NUM}: ${PR_TITLE}

Automated port of #${PR_NUM} from grafana/beyla.
Original PR: ${PR_URL}"

              # Add note about rejects if any
              if [ "$REJECTED" = true ]; then
                COMMIT_MSG+="

Note: Some changes couldn't be applied automatically and have been saved as reject files.
Manual intervention is required to complete the port."
              fi
              
              # Commit changes
              git commit -m "$COMMIT_MSG"
              
              # Push branch to upstream
              echo "Pushing branch ${BRANCH_NAME}..."
              if ! git push origin ${BRANCH_NAME} --force; then
                echo "Failed to push branch ${BRANCH_NAME}."
              else
                echo "Successfully pushed branch ${BRANCH_NAME}."
              fi
            else
              echo "No changes to commit for PR #${PR_NUM}."
            fi
            
            # Go back to Beyla repository
            cd ..
          done
          
          # Create a tar of all reject files
          if [ "$(ls -A reject_files)" ]; then
            echo "Creating archive of all reject files..."
            tar -czf reject_files.tar.gz reject_files/
            echo "Reject files archive created: reject_files.tar.gz"
            
            # Upload artifact in GitHub Actions
            echo "To access the reject files, upload them as an artifact using:"
            echo "- name: Upload Reject Files"
            echo "  uses: actions/upload-artifact@v3"
            echo "  with:"
            echo "    name: reject-files"
            echo "    path: reject_files.tar.gz"
          else
            echo "No reject files were created."
          fi
