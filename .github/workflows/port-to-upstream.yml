name: Port PRs to Upstream OTel eBPF Instrumentation

# Simple trigger to run on every push or PR action
on: [push, pull_request]

permissions:
  contents: write
  id-token: write
  pull-requests: write

jobs:
  port-to-upstream:
    runs-on: ubuntu-latest
    steps:
      - name: Debug event
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event path: ${{ github.event_path }}"
          echo "Ref: ${{ github.ref }}"
          
      - name: Get secrets from Vault
        id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@main
        with:
          repo_secrets: |
            GITHUB_APP_ID=github-app:app-id
            GITHUB_APP_INSTALLATION_ID=github-app:app-installation-id
            GITHUB_APP_PRIVATE_KEY=github-app:private-key
            
      - name: Checkout Beyla
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate App Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ env.GITHUB_APP_ID }}
          private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}
          installation-id: ${{ env.GITHUB_APP_INSTALLATION_ID }}
          owner: grafana
          repositories: "opentelemetry-ebpf-instrumentation"
          permission-contents: write
          
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: grafana/opentelemetry-ebpf-instrumentation
          token: ${{ steps.app-token.outputs.token }}
          path: opentelemetry-ebpf-instrumentation
          
      - name: Process labeled PRs
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          echo "Running PR processing..."
          
          # Find labeled PRs
          LABELED_PRS=$(gh pr list --repo grafana/beyla --label "port-to-otel-ebpf-inst" --json number,title,url,baseRefName,headRefName,state --limit 100)
          echo "Found PRs: $LABELED_PRS"
          
          # Process each labeled PR
          echo "$LABELED_PRS" | jq -c '.[]' | while read -r PR_JSON; do
            PR_NUM=$(echo "$PR_JSON" | jq -r '.number')
            PR_TITLE=$(echo "$PR_JSON" | jq -r '.title')
            PR_URL=$(echo "$PR_JSON" | jq -r '.url')
            PR_BASE_BRANCH=$(echo "$PR_JSON" | jq -r '.baseRefName')
            
            echo "Processing PR #${PR_NUM}: ${PR_TITLE}"
            
            # Try fetching the PR branch
            git fetch origin pull/${PR_NUM}/head:pr-${PR_NUM} || {
              echo "Failed to fetch PR #${PR_NUM}. Continuing with next PR."
              continue
            }
            
            git checkout pr-${PR_NUM}
            
            # Get base/head SHAs
            BASE_SHA=$(git merge-base origin/${PR_BASE_BRANCH} pr-${PR_NUM})
            HEAD_SHA=$(git rev-parse HEAD)
            
            # Get changed files (excluding vendor/licenses and workflows)
            CHANGED_FILES=$(git diff --name-only ${BASE_SHA} ${HEAD_SHA} | grep -v "vendor/" | grep -v "LICENSE" | grep -v "third_party_licenses.csv" | grep -v "\.github/workflows/" || echo "")
            
            if [ -z "${CHANGED_FILES}" ]; then
              echo "No relevant files in PR #${PR_NUM}. Skipping."
              continue
            fi
            
            # Create patch
            git diff ${BASE_SHA} ${HEAD_SHA} -- ${CHANGED_FILES} > pr-${PR_NUM}.patch
            
            # Process in target repo
            cd opentelemetry-ebpf-instrumentation
            
            # Create branch
            BRANCH_NAME="port/${PR_NUM}-to-upstream"
            git checkout -b ${BRANCH_NAME} 2>/dev/null || git checkout ${BRANCH_NAME}
            git reset --hard origin/main
            
            # Apply patch with rejects
            git apply --whitespace=fix --reject ../pr-${PR_NUM}.patch || true
            
            # Remove workflow .rej files that would cause permission issues
            find . -path "./.github/workflows/*.rej" -delete
            
            # Commit and push changes
            if ! git diff --quiet || ! git diff --staged --quiet || [ -n "$(find . -name '*.rej')" ]; then
              git add .
              git commit -m "[port] #${PR_NUM}: ${PR_TITLE}
              
              Automated port of #${PR_NUM} from grafana/beyla.
              Original PR: ${PR_URL}"
              
              # Try to push, but continue even if it fails
              git push origin ${BRANCH_NAME} --force || {
                echo "Failed to push branch ${BRANCH_NAME} for PR #${PR_NUM}. Continuing with next PR."
              }
            else
              echo "No changes to commit for PR #${PR_NUM}"
            fi
            
            cd ..
          done
          
          echo "All PRs processed."
