name: Port PRs to Upstream OTel eBPF Instrumentation

on:
  push:
    branches-ignore: []  # Run on all pushes
  pull_request:
    types: [opened, synchronize, reopened]  # Run on all PR events

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  port-to-upstream:
    runs-on: ubuntu-latest
    steps:
      - name: Get secrets from Vault
        id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@main
        with:
          repo_secrets: |
            GITHUB_APP_ID=github-app:app-id
            GITHUB_APP_INSTALLATION_ID=github-app:app-installation-id
            GITHUB_APP_PRIVATE_KEY=github-app:private-key
            
      - name: Checkout Beyla
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate App Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ env.GITHUB_APP_ID }}
          private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}
          installation-id: ${{ env.GITHUB_APP_INSTALLATION_ID }}
          owner: grafana
          repositories: "opentelemetry-ebpf-instrumentation"
          permission-contents: write
          
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: grafana/opentelemetry-ebpf-instrumentation
          token: ${{ steps.app-token.outputs.token }}
          path: opentelemetry-ebpf-instrumentation
          
      - name: Process PRs with port-to-otel-ebpf-inst label
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          # Find all PRs with the port-to-otel-ebpf-inst label
          echo "Finding PRs with port-to-otel-ebpf-inst label..."
          LABELED_PRS=$(gh pr list --repo grafana/beyla --label "port-to-otel-ebpf-inst" --json number,title,url,baseRefName,headRefName,state --limit 100)
          
          # Exit if no PRs found
          if [ -z "$LABELED_PRS" ] || [ "$LABELED_PRS" == "[]" ]; then
            echo "No PRs found with port-to-otel-ebpf-inst label."
            exit 0
          fi
          
          # Process each PR
          echo "$LABELED_PRS" | jq -c '.[]' | while read -r PR_JSON; do
            PR_NUM=$(echo "$PR_JSON" | jq -r '.number')
            PR_TITLE=$(echo "$PR_JSON" | jq -r '.title')
            PR_URL=$(echo "$PR_JSON" | jq -r '.url')
            PR_BASE_BRANCH=$(echo "$PR_JSON" | jq -r '.baseRefName')
            PR_HEAD_BRANCH=$(echo "$PR_JSON" | jq -r '.headRefName')
            PR_STATE=$(echo "$PR_JSON" | jq -r '.state')
            
            echo "================================================================"
            echo "Processing PR #${PR_NUM}: ${PR_TITLE}"
            echo "================================================================"
            
            # Skip closed PRs
            if [ "$PR_STATE" == "CLOSED" ]; then
              echo "PR is closed. Skipping."
              continue
            fi
            
            # Branch name in target repo
            BRANCH_NAME="port/${PR_NUM}-to-upstream"
            
            # Try to fetch the PR branch
            if ! git fetch origin pull/${PR_NUM}/head:pr-${PR_NUM} 2>/dev/null; then
              echo "Could not fetch PR branch. Skipping."
              continue
            fi
            
            # Checkout the PR branch
            git checkout pr-${PR_NUM}
            
            # Get the base and head SHAs
            BASE_SHA=$(git merge-base origin/${PR_BASE_BRANCH} pr-${PR_NUM})
            HEAD_SHA=$(git rev-parse HEAD)
            
            # Get changed files excluding vendor and license files
            CHANGED_FILES=$(git diff --name-only ${BASE_SHA} ${HEAD_SHA} | grep -v "vendor/" | grep -v "LICENSE" | grep -v "third_party_licenses.csv" || echo "")
            
            # Check if there are any relevant files to port
            if [ -z "${CHANGED_FILES}" ]; then
              echo "No relevant files to port. Skipping."
              continue
            fi
            
            # Create a patch
            git diff ${BASE_SHA} ${HEAD_SHA} -- ${CHANGED_FILES} > pr-${PR_NUM}.patch
            
            # Go to target repository and create/reset branch
            cd opentelemetry-ebpf-instrumentation
            
            # Create or checkout branch
            git checkout -b ${BRANCH_NAME} 2>/dev/null || git checkout ${BRANCH_NAME}
            git reset --hard origin/main
            
            # Apply patch with reject files
            git apply --whitespace=fix --reject ../pr-${PR_NUM}.patch || true
            
            # Keep reject files for manual application
            # Add them to the commit so they're available in the branch
            
            # Commit and push if there are changes
            if ! git diff --quiet || ! git diff --staged --quiet || [ -n "$(find . -name '*.rej')" ]; then
              # Add all changes including .rej files
              git add .
              
              # Check if we have any reject files
              if [ -n "$(find . -name '*.rej')" ]; then
                REJECT_MESSAGE="

Some changes couldn't be automatically applied and have been saved as .rej files.
These files are included in this branch for manual application."
              else
                REJECT_MESSAGE=""
              fi
              
              git commit -m "[port] #${PR_NUM}: ${PR_TITLE}
              
Automated port of #${PR_NUM} from grafana/beyla.
Original PR: ${PR_URL}${REJECT_MESSAGE}"
              
              git push origin ${BRANCH_NAME} --force
              echo "Pushed branch ${BRANCH_NAME}"
            else
              echo "No changes to commit for PR #${PR_NUM}"
            fi
            
            # Go back to Beyla repository
            cd ..
          done
          
          echo "Processing completed."
