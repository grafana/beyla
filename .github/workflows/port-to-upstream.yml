name: Port to Upstream OTel eBPF Instrumentation

on:
  pull_request:
    types: [opened, synchronize, labeled, closed]

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  port-to-upstream:
    if: |
      github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Get secrets from Vault
        id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@main
        with:
          repo_secrets: |
            GITHUB_APP_ID=github-app:app-id
            GITHUB_APP_INSTALLATION_ID=github-app:app-installation-id
            GITHUB_APP_PRIVATE_KEY=github-app:private-key
      - name: Checkout Beyla
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate App Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ env.GITHUB_APP_ID }}
          private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}
          installation-id: ${{ env.GITHUB_APP_INSTALLATION_ID }}
          owner: grafana
          repositories: "opentelemetry-ebpf-instrumentation"
          permission-contents: write
          
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: grafana/opentelemetry-ebpf-instrumentation
          token: ${{ steps.app-token.outputs.token }}
          path: opentelemetry-ebpf-instrumentation          
          
      - name: Port changes and prepare PR
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          TARGET_PR_NUMBER: "1904"  # Hardcoded target PR number
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          BRANCH_NAME: port/1904-to-upstream
        run: |
          # Fetch the target PR information
          echo "Fetching information for PR #1904"
          TARGET_PR_INFO=$(gh pr view 1904 --repo grafana/beyla --json title,url,baseRefName,headRefName,headRepositoryOwner,headRepository)
          TARGET_PR_TITLE=$(echo "$TARGET_PR_INFO" | jq -r '.title')
          TARGET_PR_URL=$(echo "$TARGET_PR_INFO" | jq -r '.url')
          TARGET_PR_BASE_BRANCH=$(echo "$TARGET_PR_INFO" | jq -r '.baseRefName')
          TARGET_PR_HEAD_BRANCH=$(echo "$TARGET_PR_INFO" | jq -r '.headRefName')
          TARGET_PR_HEAD_OWNER=$(echo "$TARGET_PR_INFO" | jq -r '.headRepositoryOwner.login')
          TARGET_PR_HEAD_REPO=$(echo "$TARGET_PR_INFO" | jq -r '.headRepository.name')
          
          echo "Target PR Title: $TARGET_PR_TITLE"
          echo "Target PR URL: $TARGET_PR_URL"
          
          # Fetch the PR branch
          git fetch origin pull/1904/head:pr-1904
          git checkout pr-1904
          
          # Get the base and head SHAs
          TARGET_BASE_SHA=$(git merge-base origin/$TARGET_PR_BASE_BRANCH pr-1904)
          TARGET_HEAD_SHA=$(git rev-parse HEAD)
          
          echo "Target PR Base SHA: $TARGET_BASE_SHA"
          echo "Target PR Head SHA: $TARGET_HEAD_SHA"
          
          # Get the list of changed files in the target PR
          CHANGED_FILES=$(git diff --name-only ${TARGET_BASE_SHA} ${TARGET_HEAD_SHA})
          
          # Exit if no files have changed
          if [ -z "${CHANGED_FILES}" ]; then
            echo "No files have changed in PR #1904. Nothing to port."
            exit 0
          fi
          
          # Print the list of changed files
          echo "Files changed in PR #1904:"
          echo "${CHANGED_FILES}"
          
          # Navigate to the target repository
          cd opentelemetry-ebpf-instrumentation
          
          # Configure git locally
          git config --local user.email bot@grafana.com
          git config --local user.name grafanabot
          
          # Create a new branch
          git checkout -b ${BRANCH_NAME}
          
          # Go back to the beyla repository
          cd ..
          
          # Copy only the changed files to the target repository
          for file in ${CHANGED_FILES}; do
            # Skip files that don't exist in the target repo structure
            if [[ ! -f "opentelemetry-ebpf-instrumentation/$file" && ! -d "$(dirname "opentelemetry-ebpf-instrumentation/$file")" ]]; then
              echo "Skipping file not in target repo structure: $file"
              continue
            fi
            
            echo "Copying $file to target repository"
            mkdir -p $(dirname "opentelemetry-ebpf-instrumentation/$file")
            cp "$file" "opentelemetry-ebpf-instrumentation/$file"
          done
          
          # Go to the target repository
          cd opentelemetry-ebpf-instrumentation
          
          # Check if there are any changes
          if git diff --quiet; then
            echo "No relevant changes to commit"
            exit 0
          fi
          
          # Add and commit the changes
          git add .
          git diff --staged --quiet || git commit -m "[port] #1904: ${TARGET_PR_TITLE}
          
          Automated port of #1904 from grafana/beyla.
          Original PR: ${TARGET_PR_URL}"
          
          # Check if we have changes to push
          if git diff --quiet HEAD HEAD~1 2>/dev/null; then
            echo "No changes to push"
            exit 0
          fi
          
          # Push changes to the fork repository
          git push origin "refs/heads/${BRANCH_NAME}" --force
          
          # Create PR to upstream repository
          # PR_URL=$(gh pr create \
          #   --title "[port] #1904: ${TARGET_PR_TITLE}" \
          #   --body "Automated port of #1904 from grafana/beyla.
            
          #   Original PR: ${TARGET_PR_URL}" \
          #   --repo open-telemetry/opentelemetry-ebpf-instrumentation \
          #   --head grafana:${BRANCH_NAME} \
          #   --base main \
          #   --draft)
          
          # echo "upstream_pr_url=${PR_URL}" >> $GITHUB_OUTPUT
          # echo "upstream_pr_number=$(basename ${PR_URL})" >> $GITHUB_OUTPUT
          
      # - name: Create PR to upstream repo
      #   env:
      #     GH_TOKEN: ${{ steps.app-token.outputs.token }}
      #   run: |
      #     gh pr create \
      #       --title "[port] #1904: ${TARGET_PR_TITLE}" \
      #       --body "Automated port of #1904 from grafana/beyla.
      #       Original PR: ${TARGET_PR_URL}" \
      #       --repo open-telemetry/opentelemetry-ebpf-instrumentation \
      #       --head grafana:${BRANCH_NAME} \
      #       --base main \
      #       --draft
