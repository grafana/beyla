version: "2"
issues:
  # Maximum issues count per one linter.
  max-issues-per-linter: 0
  # Maximum count of issues with the same text.
  max-same-issues: 0

formatters:
  enable:
    - gofumpt
    - goimports

  settings:
    gofmt:
      # simplify code: gofmt with `-s` option, true by default
      simplify: true

    goimports:
      # put imports beginning with prefix after 3rd-party packages;
      # it's a comma-separated list of prefixes
      local-prefixes:
        - github.com/open-telemetry/opentelemetry-ebpf-instrumentation
        - github.com/grafana/beyla

linters:
  exclusions:
    paths:
      - ^configs
      - ^docs
      # this is temporarily imported code that does not rely on us
      - ^pkg/export/otel/metric
      - ^.obi-src

    presets:
      - std-error-handling
    # Log a warning if an exclusion rule is unused.
    warn-unused: true

    rules:
      # revive returns false indent-error-flow and early-return errors in some cases where
      # an "else" clause is required to access the if condition context
      - path: .*
        linters:
          - revive
        text: indent-error-flow
      - path: .*
        linters:
          - revive
        text: early-return
      - path: .*
        linters:
          - govet
        text: shadow

      # exclude deprecated API usage errors. If we deprecate some properties is because we don't want to remove them
      # (hide/undocument them, but keep supporting them until the next major version)
      - path: .*
        linters:
          - staticcheck
        text: "SA1019:"

      # TODO: enable
      - path: .*
        linters:
          - gosec

  # TODO: use same config as OBI
  enable:
    - errcheck
    - errorlint
    - cyclop
    - errname
    - gocritic
    - govet
    - ineffassign
    - revive
    - staticcheck
    - unused
  disable:
    - exhaustive
  # all available settings of specific linters
  settings:
    gocritic:
      enabled-checks:
        - rangeExprCopy
        - rangeValCopy
        - indexAlloc
        - commentedOutCode
    cyclop:
      max-complexity: 12

# output configuration options
output:
  # The formats used to render issues.
  formats:
    # Prints issues in a text format with colors, line number, and linter name.
    text:
      # Output path can be either `stdout`, `stderr` or path to the file to write to.
      path: stdout
      # print linter name in the end of issue text, default is true
      print-linter-name: true
      # print lines of code with issue, default is true
      print-issued-lines: true

  # Show statistics per linter.
  show-stats: false

# options for analysis running
run:
  go: "1.24"

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: true

  # default concurrency is a available CPU number
  concurrency: 4

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  modules-download-mode: vendor

  # exit code when at least one issue was found, default is 1
  # TODO: restore when we fix typecheck to work with vendored files
  issues-exit-code: 0

  # include test files or not, default is true
  tests: true

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 10m

  # build tags to consider when analyzing code
  build-tags:
    - integration
    - integration_k8s

