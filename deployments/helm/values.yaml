image:
  repository: grafana/beyla
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "main"

imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""
## Override the deployment namespace
namespaceOverride: ""

## DaemonSet annotations
# annotations: {}

rbac:
  create: true
  ## Use an existing ClusterRole/Role (depending on rbac.namespaced false/true)
  # useExistingRole: name-of-some-role
  # useExistingClusterRole: name-of-some-clusterRole
  pspEnabled: false
  pspUseAppArmor: false
  namespaced: false
  extraRoleRules: []
  # - apiGroups: []
  #   resources: []
  #   verbs: []
  extraClusterRoleRules: []
  # - apiGroups: []
  #   resources: []
  
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # ServiceAccount labels.
  labels: {}
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

## Expose the beyla internal metrics service to be accessed from outside the cluster (LoadBalancer service).
## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  enabled: false
  type: ClusterIP
  clusterIP: ""
  loadBalancerIP: ""
  loadBalancerClass: ""
  loadBalancerSourceRanges: []
  port: 80
  targetPort: '{{ include "beyla.internalMetricsPort" . }}'
  ## Service annotations. Can be templated.
  annotations: {}
  labels: {}
  portName: service
  # Adds the appProtocol field to the service. This allows to work with istio protocol selection. Ex: "http" or "tcp"
  appProtocol: ""

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi



## See `kubectl explain deployment.spec.strategy` for more
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
updateStrategy:
  type: RollingUpdate


# Additional volumes on the output daemonset definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# To use an external configmap for Beyla - this will replace existing configmap from chart
# kubectl create cm --from-file=beyla-config.yaml=<name-of-config-file> -n <namespace>
# externalBeylaConfigMap: 


## More configuration options available at https://grafana.com/docs/beyla/latest/configure/options/
configmapData:
  open_port: 8443
  routes:
    unmatched: heuristic
  log_level: info
  otel_traces_export:
    endpoint: http://grafana-agent:4318
 ## or alternatively use
  # grafana:
  #   otlp:
  #     cloud_zone: prod-eu-west-0
  #     cloud_instance_id: 123456  
  #     cloud_api_key:  
  discovery:
    services:
      - k8s_namespace: default
  attributes:
    kubernetes:
      enable: true
  # internal metrics reporting. Refer: https://grafana.com/docs/beyla/latest/configure/options/#internal-metrics-reporter
  # If set, user can expose the metrics endpoint via k8s service by configuring .Values.service section
  #prometheus_export:
    #port: 9090
    #path: /metrics

## Env variables that will override configmap values
## For example:
##   BEYLA_INTERNAL_METRICS_PROMETHEUS_PORT: 9090
env: {}
  #BEYLA_INTERNAL_METRICS_PROMETHEUS_PORT: 9090

envValueFrom: {}
  #  ENV_NAME:
  #    secretKeyRef:
  #      name: secret-name
  #      key: value_key
