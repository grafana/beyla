services:
  nginx:
    build:
      context: ../../..
      dockerfile: ./internal/test/integration/components/php/unix_sock_sql/docker/Dockerfile_nginx
    container_name: hatest-nginx
    ports:
      - 8080:80
    volumes:
      - ../../internal/test/integration/components/php/unix_sock_sql/src/:/var/www/html
      - ../../internal/test/integration/components/php/unix_sock_sql/config/nginx/sites-available:/etc/nginx/sites-available
      - php-socket:/var/run/php-fpm
    networks:
      - test-network
    depends_on:
      - php

  php:
    build:
      context: ../../..
      dockerfile: ./internal/test/integration/components/php/unix_sock_sql/docker/Dockerfile_php
    container_name: hatest-php
    ports:
      - 9000:9000
    volumes:
      - ../../internal/test/integration/components/php/unix_sock_sql/src/:/var/www/html
      - /var/www/html/vendor/
      - php-socket:/run/php-fpm
    networks:
      - test-network
    depends_on:
      - mysql

  mysql:
    build:
      context: ../../..
      dockerfile: ./internal/test/integration/components/php/unix_sock_sql/docker/Dockerfile_mysql
    container_name: hatest-mysql
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: "test"
    networks:
      - test-network

  autoinstrumenter:
    build:
      context: ../../..
      dockerfile: ./internal/test/integration/components/beyla/Dockerfile
    command:
      - --config=/configs/instrumenter-config-php.yml
    volumes:
      - ./configs/:/configs
      - ./system/sys/kernel/security:/sys/kernel/security
      - ../../../testoutput:/coverage
      - ../../../testoutput/run-php:/var/run/beyla
    image: hatest-javaautoinstrumenter
    privileged: true # in some environments (not GH Pull Requests) you can set it to false and then cap_add: [ SYS_ADMIN ]
    network_mode: "host"
    pid: "host"
    environment:
      GOCOVERDIR: "/coverage"
      BEYLA_TRACE_PRINTER: "text"
      BEYLA_EXECUTABLE_NAME: "nginx|php-fpm"
      BEYLA_SERVICE_NAMESPACE: "integration-test"
      BEYLA_METRICS_INTERVAL: "10ms"
      BEYLA_BPF_BATCH_TIMEOUT: "10ms"
      BEYLA_LOG_LEVEL: "DEBUG"
      BEYLA_BPF_DEBUG: "TRUE"
      BEYLA_HOSTNAME: "beyla"
      BEYLA_OTLP_TRACES_BATCH_TIMEOUT: "1ms"
    depends_on:
      nginx:
        condition: service_started
      otelcol:
        condition: service_started

  # OpenTelemetry Collector
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.104.0@sha256:e07e325e303e86f4a87a617491e921b579a92da6d404007394757ac910bf9587
    container_name: otel-col
    deploy:
      resources:
        limits:
          memory: 125M
    restart: unless-stopped
    command: ["--config=/etc/otelcol-config/otelcol-config-4017.yml"]
    volumes:
      - ./configs/:/etc/otelcol-config
    ports:
      - "4017" # OTLP over gRPC receiver
      - "4018:4018" # OTLP over HTTP receiver
      - "9464" # Prometheus exporter
      - "8888" # metrics endpoint
    depends_on:
      prometheus:
        condition: service_started
      jaeger:
        condition: service_started

  # Prometheus
  prometheus:
    image: quay.io/prometheus/prometheus:v2.55.1@sha256:2659f4c2ebb718e7695cb9b25ffa7d6be64db013daba13e05c875451cf51b0d3
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus-config.yml
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --log.level=debug
    volumes:
      - ./configs/:/etc/prometheus
    ports:
      - "9090:9090"

  jaeger:
    image: jaegertracing/all-in-one:1.57@sha256:8f165334f418ca53691ce358c19b4244226ed35c5d18408c5acf305af2065fb9
    ports:
      - "16686:16686" # Query frontend
      - "4317:4317" # OTEL GRPC traces collector
      - "4318:4318" # OTEL HTTP traces collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=debug

volumes:
  mysql-data:
  php-socket:

networks:
  test-network:
