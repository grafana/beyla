version: "3.8"

services:
  zookeeper:
    restart: always
    container_name: kafka-like-zookeeper
    image: docker.io/bitnamilegacy/zookeeper:3.8@sha256:4d450d4b1dab610e1012993d2ea78ba00a516b63e74214a57fef40c060ce4986
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper-volume:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    restart: always
    container_name: kafka-like
    image: docker.io/bitnamilegacy/kafka:3.3@sha256:c5dd5bcf4b76df6f388be3f3c2f54255b7ca028e4c88337a6fb50b5fed2f1b22
    ports:
      - "9093:9093"
    volumes:
      - "kafka-volume:/bitnami"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper

  testserver:
    build:
      context: ../../../internal/test/integration/components/pythonkafka/
      dockerfile: Dockerfile
    image: hatest-testserver-python-kafka
    ports:
      - "${TEST_SERVICE_PORTS}"
    depends_on:
      otelcol:
        condition: service_started
      kafka:
        condition: service_started

  autoinstrumenter:
    build:
      context: ../../..
      dockerfile: ./internal/test/integration/components/beyla/Dockerfile
    volumes:
      - ./configs/:/configs
      - ./system/sys/kernel/security:/sys/kernel/security
      - ../../../testoutput:/coverage
      - ../../../testoutput/run-python:/var/run/beyla
    image: hatest-autoinstrumenter
    privileged: true # in some environments (not GH Pull Requests) you can set it to false and then cap_add: [ SYS_ADMIN ]
    network_mode: "service:testserver"
    pid: "service:testserver"
    environment:
      BEYLA_CONFIG_PATH: "/configs/instrumenter-config.yml"
      GOCOVERDIR: "/coverage"
      BEYLA_TRACE_PRINTER: "text"
      BEYLA_OPEN_PORT: "${BEYLA_OPEN_PORT}"
      BEYLA_DISCOVERY_POLL_INTERVAL: 500ms
      BEYLA_EXECUTABLE_PATH: "${BEYLA_EXECUTABLE_PATH}"
      BEYLA_SERVICE_NAMESPACE: "integration-test"
      BEYLA_METRICS_INTERVAL: "10ms"
      BEYLA_BPF_BATCH_TIMEOUT: "10ms"
      BEYLA_LOG_LEVEL: "DEBUG"
      BEYLA_BPF_DEBUG: "TRUE"
      BEYLA_HOSTNAME: "beyla"
      BEYLA_BPF_HTTP_REQUEST_TIMEOUT: "5s"
      BEYLA_PROCESSES_INTERVAL: "100ms"
      BEYLA_TRACES_INSTRUMENTATIONS: "kafka"
      BEYLA_METRICS_INSTRUMENTATIONS: "kafka"
      BEYLA_METRICS_FEATURES: "application"
      OTEL_KAFKA_TOPIC_UUID_CACHE_SIZE: "1000"
    depends_on:
      testserver:
        condition: service_started

  # OpenTelemetry Collector
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.104.0@sha256:e07e325e303e86f4a87a617491e921b579a92da6d404007394757ac910bf9587
    container_name: otel-col
    deploy:
      resources:
        limits:
          memory: 125M
    restart: unless-stopped
    command: ["--config=/etc/otelcol-config/otelcol-config.yml"]
    volumes:
      - ./configs/:/etc/otelcol-config
    ports:
      - "4317" # OTLP over gRPC receiver
      - "4318:4318" # OTLP over HTTP receiver
      - "9464" # Prometheus exporter
      - "8888" # metrics endpoint
    depends_on:
      prometheus:
        condition: service_started

  # Prometheus
  prometheus:
    image: quay.io/prometheus/prometheus:v2.55.1@sha256:2659f4c2ebb718e7695cb9b25ffa7d6be64db013daba13e05c875451cf51b0d3
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus-config.yml
      - --web.enable-lifecycle
      - --web.route-prefix=/
    volumes:
      - ./configs/:/etc/prometheus
    ports:
      - "9090:9090"

  jaeger:
    image: jaegertracing/all-in-one:1.57@sha256:8f165334f418ca53691ce358c19b4244226ed35c5d18408c5acf305af2065fb9
    ports:
      - "16686:16686" # Query frontend
      - "4317" # OTEL GRPC traces collector
      - "4318" # OTEL HTTP traces collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=debug

volumes:
  kafka-volume:
  zookeeper-volume:
