package ebpf

import (
	"context"
	"errors"
	"fmt"
	"io"
	"os"
	"path"
	"reflect"
	"strconv"
	"strings"

	"github.com/grafana/ebpf-autoinstrument/pkg/pipe/global"

	"golang.org/x/sys/unix"

	"github.com/grafana/ebpf-autoinstrument/pkg/ebpf/goruntime"
	"github.com/grafana/ebpf-autoinstrument/pkg/ebpf/grpc"

	ebpfcommon "github.com/grafana/ebpf-autoinstrument/pkg/ebpf/common"

	"github.com/cilium/ebpf/rlimit"

	"github.com/cilium/ebpf/link"

	"github.com/cilium/ebpf"
	"github.com/grafana/ebpf-autoinstrument/pkg/goexec"

	"github.com/grafana/ebpf-autoinstrument/pkg/ebpf/nethttp"
	"github.com/mariomac/pipes/pkg/node"
	"golang.org/x/exp/slog"
)

// Tracer is an individual eBPF program (e.g. the net/http or the grpc tracers)
type Tracer interface {
	// Load the bpf object that is generated by the bpf2go compiler
	Load() (*ebpf.CollectionSpec, error)
	// Constants returns a map of constants to be overriden into the eBPF program.
	// The key is the constant name and the value is the value to overwrite.
	Constants(*goexec.Offsets) map[string]any
	// BpfObjects that are created by the bpf2go compiler
	BpfObjects() any
	// Probes returns a map with the name of the functions that need to be inspected
	// in the executable, as well as the eBPF programs that optionally need to be
	// inserted as the function start and end probes
	Probes() map[string]ebpfcommon.FunctionPrograms
	// Run will do the action of listening for eBPF traces and forward them
	// periodically to the output channel.
	Run(context.Context, chan<- []ebpfcommon.HTTPRequestTrace)
	// AddCloser adds io.Closer instances that need to be invoked when the
	// Run function ends.
	AddCloser(c ...io.Closer)
}

// TracerProvider returns a StartFuncCtx for each discovered eBPF traceable source: GRPC, HTTP...
func TracerProvider(ctx context.Context, cfg ebpfcommon.TracerConfig) ([]node.StartFuncCtx[[]ebpfcommon.HTTPRequestTrace], error) { //nolint:all
	log := slog.With("component", "ebpf.TracerProvider")

	// Each program is an eBPF source: net/http, grpc...
	programs := []Tracer{
		&nethttp.Tracer{Cfg: &cfg},
		&nethttp.GinTracer{Tracer: nethttp.Tracer{Cfg: &cfg}},
		&grpc.Tracer{Cfg: &cfg},
		&goruntime.Tracer{Cfg: &cfg},
	}

	// merging all the functions from all the programs, in order to do
	// a complete inspection of the target executable
	allFuncs := allFunctionNames(programs)
	offsets, err := inspect(ctx, &cfg, allFuncs)
	if err != nil {
		return nil, fmt.Errorf("inspecting offsets: %w", err)
	}

	programs = filterNotFoundPrograms(programs, offsets)
	if len(programs) == 0 {
		return nil, errors.New("no instrumentable function found")
	}

	// Instead of the executable file in the disk, we pass the /proc/<pid>/exec
	// to allow loading it from different container/pods in containerized environments
	exe, err := link.OpenExecutable(offsets.FileInfo.ProExeLinkPath)
	if err != nil {
		return nil, fmt.Errorf("opening %q executable file: %w", offsets.FileInfo.ProExeLinkPath, err)
	}
	if err := rlimit.RemoveMemlock(); err != nil {
		return nil, fmt.Errorf("removing memory lock: %w", err)
	}

	pinPath, err := mountBpfPinPath(&cfg)
	if err != nil {
		return nil, fmt.Errorf("mounting BPF FS in %q: %w", cfg.BpfBaseDir, err)
	}

	// startNodes contains the eBPF programs (HTTP, GRPC tracers...) plus a function
	// that just waits for the passed context to finish before closing the BPF pin
	// path
	startNodes := []node.StartFuncCtx[[]ebpfcommon.HTTPRequestTrace]{
		waitToCloseBbfPinPath(pinPath),
	}

	for _, p := range programs {
		plog := log.With("program", reflect.TypeOf(p))
		plog.Debug("loading eBPF program")
		spec, err := p.Load()
		if err != nil {
			unmountBpfPinPath(pinPath)
			return nil, fmt.Errorf("loading eBPF program: %w", err)
		}
		if err := spec.RewriteConstants(p.Constants(offsets)); err != nil {
			return nil, fmt.Errorf("rewriting BPF constants definition: %w", err)
		}
		if err := spec.LoadAndAssign(p.BpfObjects(), &ebpf.CollectionOptions{
			Maps: ebpf.MapOptions{
				PinPath: pinPath,
			}}); err != nil {
			printVerifierErrorInfo(err)
			unmountBpfPinPath(pinPath)
			return nil, fmt.Errorf("loading and assigning BPF objects: %w", err)
		}
		i := instrumenter{
			exe:     exe,
			offsets: offsets,
		}
		// TODO: not running program if it does not find the required probes
		for funcName, funcPrograms := range p.Probes() {
			offs, ok := offsets.Funcs[funcName]
			if !ok {
				// the program function is not in the detected offsets. Ignoring
				continue
			}
			slog.Debug("going to instrument function", "function", funcName, "offsets", offs, "programs", funcPrograms)
			if err := i.instrument(ebpfcommon.Probe{
				Offsets:  offs,
				Programs: funcPrograms,
			}); err != nil {
				printVerifierErrorInfo(err)
				unmountBpfPinPath(pinPath)
				return nil, fmt.Errorf("instrumenting function %q: %w", funcName, err)
			}
			p.AddCloser(i.uprobes...)
		}
		startNodes = append(startNodes, p.Run)
	}

	return startNodes, nil
}

func mountBpfPinPath(cfg *ebpfcommon.TracerConfig) (string, error) {
	pinPath := path.Join(cfg.BpfBaseDir, strconv.Itoa(os.Getpid()))
	log := slog.With("component", "ebpf.TracerProvider", "path", pinPath)
	log.Debug("mounting BPF map pinning path")
	if _, err := os.Stat(pinPath); err != nil {
		if !os.IsNotExist(err) {
			return "", fmt.Errorf("accessing %s stat: %w", pinPath, err)
		}
		log.Debug("BPF map pinning path does not exist. Creating before mounting")
		if err := os.MkdirAll(pinPath, 0700); err != nil {
			return "", fmt.Errorf("creating directory %s: %w", pinPath, err)
		}
	}

	return pinPath, bpfMount(pinPath)
}

// this will be just a start node that listens for the context cancellation and then
// unmounts the BPF pinning path
func waitToCloseBbfPinPath(pinPath string) node.StartFuncCtx[[]ebpfcommon.HTTPRequestTrace] {
	return func(ctx context.Context, _ chan<- []ebpfcommon.HTTPRequestTrace) {
		<-ctx.Done()
		unmountBpfPinPath(pinPath)
	}
}

func unmountBpfPinPath(pinPath string) {
	log := slog.With("component", "ebpf.TracerProvider", "path", pinPath)
	log.Debug("context has been canceled. Unmounting BPF map pinning path")
	if err := unix.Unmount(pinPath, unix.MNT_FORCE); err != nil {
		log.Warn("can't unmount pinned root. Try unmounting and removing it manually", err)
		return
	}
	log.Debug("unmounted bpf file system")
	if err := os.RemoveAll(pinPath); err != nil {
		log.Warn("can't remove pinned root. Try removing it manually", err)
	} else {
		log.Debug("removed pin path")
	}
}

// filterNotFoundPrograms will filter these programs whose required functions (as
// returned in the Offsets method) haven't been found in the offsets
func filterNotFoundPrograms(programs []Tracer, offsets *goexec.Offsets) []Tracer {
	var filtered []Tracer
	funcs := offsets.Funcs
programs:
	for _, p := range programs {
		for fn, fp := range p.Probes() {
			if !fp.Required {
				continue
			}
			if _, ok := funcs[fn]; !ok {
				continue programs
			}
		}
		filtered = append(filtered, p)
	}
	return filtered
}

func allFunctionNames(programs []Tracer) []string {
	uniqueFunctions := map[string]struct{}{}
	var functions []string
	for _, p := range programs {
		for funcName := range p.Probes() {
			// avoid duplicating function names
			if _, ok := uniqueFunctions[funcName]; !ok {
				uniqueFunctions[funcName] = struct{}{}
				functions = append(functions, funcName)
			}
		}
	}
	return functions
}

func inspect(ctx context.Context, cfg *ebpfcommon.TracerConfig, functions []string) (*goexec.Offsets, error) {
	var finder goexec.ProcessFinder
	if cfg.Port != 0 {
		finder = goexec.OwnedPort(cfg.Port)
	} else {
		finder = goexec.ProcessNamed(cfg.Exec)
	}
	offsets, err := goexec.InspectOffsets(ctx, finder, functions)
	if err != nil {
		return nil, fmt.Errorf("error analysing target executable: %w", err)
	}

	parts := strings.Split(offsets.FileInfo.CmdExePath, "/")
	global.Context(ctx).ServiceName = parts[len(parts)-1]

	return offsets, nil
}

type instrumenter struct {
	offsets *goexec.Offsets
	exe     *link.Executable
	uprobes []io.Closer
}

func (i *instrumenter) instrument(probe ebpfcommon.Probe) error {
	// Attach BPF programs as start and return probes
	if probe.Programs.Start != nil {
		up, err := i.exe.Uprobe("", probe.Programs.Start, &link.UprobeOptions{
			Address: probe.Offsets.Start,
		})
		if err != nil {
			return fmt.Errorf("setting uprobe: %w", err)
		}
		i.uprobes = append(i.uprobes, up)
	}

	if probe.Programs.End != nil {
		// Go won't work with Uretprobes because of the way Go manages the stack. We need to set uprobes just before the return
		// values: https://github.com/iovisor/bcc/issues/1320
		for _, ret := range probe.Offsets.Returns {
			urp, err := i.exe.Uprobe("", probe.Programs.End, &link.UprobeOptions{
				Address: ret,
			})
			if err != nil {
				return fmt.Errorf("setting uretprobe: %w", err)
			}
			i.uprobes = append(i.uprobes, urp)
		}
	}

	return nil
}

func printVerifierErrorInfo(err error) {
	var ve *ebpf.VerifierError
	if errors.As(err, &ve) {
		_, _ = fmt.Fprintf(os.Stderr, "Error Log:\n %v\n", strings.Join(ve.Log, "\n"))
	}
}
