package ebpfcommon

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"golang.org/x/net/http2"
)

func TestHTTP2QuickDetection(t *testing.T) {
	tests := []struct {
		name     string
		input    []byte
		inputLen int
		expected bool
	}{
		{
			name:     "Empty",
			input:    []byte{},
			inputLen: 100,
			expected: false,
		},
		{
			name:     "Short",
			input:    []byte{0, 0, 70, 1, 4},
			inputLen: 3,
			expected: false,
		},
		{
			name:     "Regular HTTP2/gRPC Frame",
			input:    []byte{0, 0, 70, 1, 4, 0, 0, 0, 19, 204, 131, 4, 147, 96, 233, 45, 18, 22, 147, 175, 12, 155, 139, 103, 115, 16, 172, 98, 42, 97, 145, 31, 134, 126, 167, 0, 22, 16, 7, 36, 140, 179, 27, 50, 202, 25, 101, 105, 182, 93, 33, 66, 211, 97, 41, 64, 0, 182, 66, 44, 219, 242, 186, 217, 2, 203, 196, 3, 143, 182, 209, 86, 0, 127, 203, 202, 201, 200, 199, 0, 0, 5, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			inputLen: 10000,
			expected: true,
		},
		{
			name:     "Reset frame before HTTP2/gRPC Frame",
			input:    []byte{0, 0, 4, 3, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 70, 1, 4, 0, 0, 0, 21, 205, 131, 4, 147, 96, 233, 45, 18, 22, 147, 175, 12, 155, 139, 103, 115, 16, 172, 98, 42, 97, 145, 31, 134, 126, 167, 0, 22, 44, 99, 27, 33, 124, 174, 72, 228, 109, 129, 233, 27, 125, 246, 133, 44, 101, 28, 111, 70, 32, 178, 85, 163, 108, 97, 149, 199, 99, 121, 169, 90, 149, 225, 188, 176, 3, 204, 203, 202, 201, 200, 0, 0, 5, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			inputLen: 10000,
			expected: true,
		},
		{
			name:     "Too short of input len, but enough to parse the reset frame",
			input:    []byte{0, 0, 4, 3, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 70, 1, 4, 0, 0, 0, 21, 205, 131, 4, 147, 96, 233, 45, 18, 22, 147, 175, 12, 155, 139, 103, 115, 16, 172, 98, 42, 97, 145, 31, 134, 126, 167, 0, 22, 44, 99, 27, 33, 124, 174, 72, 228, 109, 129, 233, 27, 125, 246, 133, 44, 101, 28, 111, 70, 32, 178, 85, 163, 108, 97, 149, 199, 99, 121, 169, 90, 149, 225, 188, 176, 3, 204, 203, 202, 201, 200, 0, 0, 5, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			inputLen: frameHeaderLen + 2,
			expected: false,
		},
		{
			name:     "Kafka frame instead of HTTP2",
			input:    []byte{0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 2, 0, 6, 115, 97, 114, 97, 109, 97, 255, 255, 255, 255, 0, 0, 39, 16, 0, 0, 0, 1, 0, 9, 105, 109, 112, 111, 114, 116, 97, 110, 116, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 72},
			inputLen: 10000,
			expected: false,
		},
		{
			name:     "No headers frame (manually tweaked the type to fail)",
			input:    []byte{0, 0, 4, 3, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 70, 2, 4, 0, 0, 0, 21, 205, 131, 4, 147, 96, 233, 45, 18, 22, 147, 175, 12, 155, 139, 103, 115, 16, 172, 98, 42, 97, 145, 31, 134, 126, 167, 0, 22, 44, 99, 27, 33, 124, 174, 72, 228, 109, 129, 233, 27, 125, 246, 133, 44, 101, 28, 111, 70, 32, 178, 85, 163, 108, 97, 149, 199, 99, 121, 169, 90, 149, 225, 188, 176, 3, 204, 203, 202, 201, 200, 0, 0, 5, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			inputLen: 10000,
			expected: false,
		},
		{
			name:     "Truncated frame, len should be 70 of the second frame",
			input:    []byte{0, 0, 4, 3, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 70, 2, 4, 0, 0, 0, 21, 205, 131},
			inputLen: 10000,
			expected: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			res := isLikelyHTTP2(tt.input, tt.inputLen)
			assert.Equal(t, tt.expected, res)
		})
	}
}

/*

[0, 0, 109, 1, 4, 0, 0, 57, 71, 195, 194, 131, 134, 193, 192, 191, 190, 0, 11, 116, 114, 97, 99, 0, 0, 0, 0, 0, 0, 0, 0, 8, 101, 112, 97, 114, 101, 110, 116, 55, 0, 0, 0, 0, 136, 113, 187, 128, 24, 11, 186, 95, 55, 0, 0, 208, 130, 8, 212, 164, 126, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 224, 130, 8, 212, 164, 126, 0, 0, 137, 42, 109, 81, 165, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 7, 98, 97, 103, 103, 97, 103, 101, 22, 115, 121, 110, 116, 104, 101, 116, 105, 99, 95, 114, 101, 113, 0, 0, 0, 0, 0, 0, 0, 0, 23, 117, 101, 115, 116, 61, 116, 114, 117, 101, 0, 0, 4, 8, 0, 0, 0, 57, 71, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 26, 0, 1, 0, 0, 57, 71, 0, 0, 0, 0, 21, 10, 19, 114, 101, 99, 111, 109, 109, 101, 110, 0, 0, 0, 0, 0, 0, 0, 0, 23, 100, 97, 116, 105, 111, 110, 67, 97, 99, 104, 101, 0, 0, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 51, 0, 0, 0, 0, 0, 0, 64, 66, 0, 212, 164, 126, 0, 0, 240, 144, 127, 5, 165, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]

[0, 0, 2, 1, 4, 0, 1, 23, 121, 136, 192, 0, 0, 2, 1, 4, 0, 1, 23, 123, 136, 192, 0, 1, 120, 0, 0, 0, 1, 23, 123, 0, 0, 0, 1, 115, 10, 10, 54, 69, 57, 50, 90, 77, 89, 89, 70, 90, 18, 12, 83, 111, 108, 97, 114, 32, 70, 105, 108, 116, 101, 114, 26, 157, 2, 69, 110, 104, 97, 110, 99, 101, 32, 121, 111, 117, 114, 32, 118, 105, 101, 119, 105, 110, 103, 32, 101, 120, 112, 101, 114, 105, 101, 110, 99, 101, 32, 119, 105, 116, 104, 32, 69, 99, 108, 105, 112, 83, 109, 97, 114, 116, 32, 83, 111, 108, 97, 114, 32, 70, 105, 108, 116, 101, 114, 32, 102, 111, 114, 32, 56, 226, 128, 157, 32, 116, 101, 108, 101, 115, 99, 111, 112, 101, 115, 46, 32, 87, 105, 116, 104, 32, 116, 119, 111, 32, 86, 101, 108, 99, 114, 111, 32, 115, 116, 114, 97, 112, 115, 32, 97, 110, 100, 32, 102, 111, 117, 114, 32, 115, 101, 108, 102, 45, 97, 100, 104, 101, 115, 105, 118, 101, 32, 86, 101, 108, 99, 114, 111, 32, 112, 97, 100, 115, 32, 102, 111, 114, 32, 97, 100, 100, 101, 100, 32, 115, 97, 102, 101, 116, 121, 44, 32, 121, 111, 117, 32, 99, 97, 110, 32, 98, 101, 32, 97, 115, 115, 117, 114, 101, 100, 32, 116, 104, 97, 116, 32, 116, 104, 101, 32, 115, 111, 108, 97, 114]

[0 0 76 1 4 0 0 170 1 220 131 4 152 96 233 45 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]

[0 0 88 1 4 0 0 91 71 213 131 4 164 96 233 45 18 22 147 175 180 164 61 52 150 169 6 147 30 173 197 179 185 136 86 51 153 9 218 53 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 48 0 0 0 0 0 0 0 37 2 0 0 0 0 0 0 73 77 78 34 163 126 0 0 0 0 0 0 0 0 0 0 128 153 3 212 164 126 0 0 128 153 3 212 164 126 0 0 0 0 0 0 0 0 0 0 191 255 255 255 255 255 255 255 213 255 255 255 255 255 255 255 1 192 234 200 178 20 98 148 0 0 0 0 0 0 0 0 0 154 3 212 164 126 0 0 0 154 3 212 164 126 0 0 0 0 0 0 0 0 0 0 8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 0 0 0 60 0 0 188 32 61 36 143 178 203 75 255 255 255 255 255 255 255 127 176 210 3 200 164 126 0 0 60 0 0 0 0 0 0 0 192]

[0 0 88 1 4 0 0 92 191 211 131 4 164 96 233 45 18 22 147 175 180 164 61 52 150 169 6 147 30 173 197 179 185 136 86 51 153 9 218 82 30 154 75 84 131 73 53 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 48 0 0 0 0 0 0 0 37 2 0 0 0 0 0 0 73 191 79 34 163 126 0 0 0 0 0 0 0 0 0 0 128 153 3 212 164 126 0 0 128 153 3 212 164 126 0 0 0 0 0 0 0 0 0 0 191 255 255 255 255 255 255 255 213 255 255 255 255 255 255 255 1 192 234 200 178 20 98 148 0 0 0 0 0 0 0 0 0 154 3 212 164 126 0 0 0 154 3 212 164 126 0 0 0 0 0 0 0 0 0 0 8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 0 0 0 60 0 0 188 32 61 36 143 178 203 75 255 255 255 255 255 255 255 127 176 210 3 200 164 126 0 0 60 0]

[0 0 87 1 4 0 0 179 21 204 131 4 163 96 233 45 18 22 147 175 122 219 44 45 68 245 184 182 119 49 10 198 34 167 117 181 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]

*/

func TestHTTP2Parsing(t *testing.T) {
	tests := []struct {
		name     string
		input    []byte
		inputLen int
		expected bool
	}{
		{
			name:     "One",
			input:    []byte{0, 0, 88, 1, 4, 0, 0, 6, 237, 208, 131, 4, 164, 96, 233, 45, 18, 22, 147, 175, 180, 164, 61, 52, 150, 169, 6, 147, 30, 173, 197, 179, 37, 2, 0, 0, 0, 0, 0, 0, 187, 70, 76, 66, 163, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 213, 255, 255, 255, 255, 255, 255, 255, 1, 105, 108, 100, 108, 105, 102, 101, 0, 0, 0, 0, 0, 0, 0, 0, 64, 183, 2, 212, 164, 126, 0, 0, 64, 183, 2, 212, 164, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 60, 103, 110, 32, 119, 105, 108, 108, 32, 119, 105, 116, 104, 115, 116, 97, 110, 100, 32, 96, 32, 0, 196, 164, 126, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 112, 32, 0, 196, 164, 126, 0, 0, 137, 42, 109, 81, 165, 126, 0, 0, 97, 115, 104, 108, 105, 103, 104, 116, 46, 106, 112, 103, 42, 12, 10, 3, 85, 83, 68, 16, 57, 24, 128, 232, 146, 38, 50, 11, 97, 99, 99, 101, 115, 115, 111, 114, 105, 101, 115, 50, 11, 102, 108, 97, 115, 104, 108, 105, 103, 104, 116, 115, 10, 165, 5, 10},
			inputLen: 32,
			expected: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			framer := byteFramer(tt.input[:tt.inputLen])
			for {
				f, err := framer.ReadFrame()

				if err != nil {
					break
				}

				if ff, ok := f.(*http2.HeadersFrame); ok {
					connInfo := BPFConnInfo{}
					method, path, contentType := readMetaFrame(&connInfo, framer, ff)
					assert.NotEmpty(t, method)
					assert.NotEmpty(t, path)
					assert.NotEmpty(t, contentType)
				}
			}
		})
	}
}
