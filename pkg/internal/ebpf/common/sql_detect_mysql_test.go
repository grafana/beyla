package ebpfcommon

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestMySQLParsing(t *testing.T) {
	for _, ts := range []struct {
		name     string
		bytes    []byte
		valid    bool
		hasError bool
		result   mySQLHdr
	}{
		{
			name:     "Valid prepare",
			bytes:    []byte{0x1c, 0x00, 0x00, 0x00, 0x16, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x20, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54, 0x28, 0x3f, 0x2c, 0x20, 0x3f, 0x29, 0x20, 0x41, 0x53, 0x20, 0x63, 0x6f, 0x6c, 0x31},
			valid:    true,
			hasError: false,
			result: mySQLHdr{
				length:  0x1c,
				command: 0x16,
			},
		},
		{
			name:     "Valid execute",
			bytes:    []byte{0x12, 0x00, 0x00, 0x00, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x00, 0x03, 0x66, 0x6f, 0x6f},
			valid:    true,
			hasError: false,
			result: mySQLHdr{
				length:  0x12,
				command: 0x17,
			},
		},
		{
			name:     "Valid Query",
			bytes:    []byte{0x21, 0x00, 0x00, 0x01, 0x03, 0x01, 0x01, 0x00, 0x01, 0xfe, 0x00, 0x01, 0x61, 0x01, 0x31, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x40, 0x40, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x31},
			valid:    true,
			hasError: false,
			result: mySQLHdr{
				length:  0x21,
				command: 0x3,
			},
		},
		{
			name:     "Unknown opcode",
			bytes:    []byte{0x1c, 0x00, 0x00, 0x00, 0x10, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x20, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54, 0x28, 0x3f, 0x2c, 0x20, 0x3f, 0x29, 0x20, 0x41, 0x53, 0x20, 0x63, 0x6f, 0x6c, 0x31},
			valid:    false,
			hasError: false,
			result: mySQLHdr{
				length:  0x1c,
				command: 0x10,
			},
		},
		{
			name:     "Zero size",
			bytes:    []byte{0x00, 0x00, 0x00, 0x00, 0x16, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x20, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54, 0x28, 0x3f, 0x2c, 0x20, 0x3f, 0x29, 0x20, 0x41, 0x53, 0x20, 0x63, 0x6f, 0x6c, 0x31},
			valid:    false,
			hasError: false,
			result: mySQLHdr{
				length:  0,
				command: 0x16,
			},
		},
	} {
		t.Run(ts.name, func(t *testing.T) {
			hdr, err := readMySQLHeader(ts.bytes)
			if ts.hasError {
				assert.NotNil(t, err)
				return
			} else {
				assert.Nil(t, err)
			}
			assert.Equal(t, ts.result, hdr)
			assert.Equal(t, ts.valid, isMySQL(ts.bytes))
		})
	}
}
