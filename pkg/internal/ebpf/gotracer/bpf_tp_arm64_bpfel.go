// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64

package gotracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpf_tpConnectionInfoT struct {
	S_addr [16]uint8
	D_addr [16]uint8
	S_port uint16
	D_port uint16
}

type bpf_tpEgressKeyT struct {
	S_port uint16
	D_port uint16
}

type bpf_tpFramerFuncInvocationT struct {
	FramerPtr uint64
	Tp        bpf_tpTpInfoT
	InitialN  int64
}

type bpf_tpGoAddrKeyT struct {
	Pid  uint64
	Addr uint64
}

type bpf_tpGoroutineMetadata struct {
	Parent    bpf_tpGoAddrKeyT
	Timestamp uint64
}

type bpf_tpGrpcClientFuncInvocationT struct {
	StartMonotimeNs uint64
	Cc              uint64
	Method          uint64
	MethodLen       uint64
	Tp              bpf_tpTpInfoT
	Flags           uint64
}

type bpf_tpGrpcFramerFuncInvocationT struct {
	FramerPtr uint64
	Tp        bpf_tpTpInfoT
	Offset    int64
}

type bpf_tpGrpcSrvFuncInvocationT struct {
	StartMonotimeNs uint64
	Stream          uint64
	Tp              bpf_tpTpInfoT
}

type bpf_tpGrpcTransportsT struct {
	Conn bpf_tpConnectionInfoT
	_    [4]byte
	Tp   bpf_tpTpInfoT
	Type uint8
	_    [7]byte
}

type bpf_tpHttpClientDataT struct {
	Method        [7]uint8
	Path          [100]uint8
	_             [5]byte
	ContentLength int64
	Pid           struct {
		HostPid uint32
		UserPid uint32
		Ns      uint32
	}
	_ [4]byte
}

type bpf_tpHttpFuncInvocationT struct {
	StartMonotimeNs uint64
	Tp              bpf_tpTpInfoT
}

type bpf_tpKafkaClientReqT struct {
	Type            uint8
	StartMonotimeNs uint64
	EndMonotimeNs   uint64
	Buf             [256]uint8
	_               [7]byte
	Conn            bpf_tpConnectionInfoT
	Pid             struct {
		HostPid uint32
		UserPid uint32
		Ns      uint32
	}
}

type bpf_tpKafkaGoReqT struct {
	Type            uint8
	StartMonotimeNs uint64
	EndMonotimeNs   uint64
	Topic           [64]uint8
	_               [7]byte
	Conn            bpf_tpConnectionInfoT
	Tp              bpf_tpTpInfoT
	Pid             struct {
		HostPid uint32
		UserPid uint32
		Ns      uint32
	}
	Op uint8
	_  [7]byte
}

type bpf_tpNewFuncInvocationT struct{ Parent uint64 }

type bpf_tpOffTableT struct{ Table [44]uint64 }

type bpf_tpProduceReqT struct {
	MsgPtr          uint64
	ConnPtr         uint64
	StartMonotimeNs uint64
}

type bpf_tpRedisClientReqT struct {
	Type            uint8
	StartMonotimeNs uint64
	EndMonotimeNs   uint64
	Buf             [256]uint8
	_               [7]byte
	Conn            bpf_tpConnectionInfoT
	_               [4]byte
	Tp              bpf_tpTpInfoT
	Pid             struct {
		HostPid uint32
		UserPid uint32
		Ns      uint32
	}
	Err uint8
	_   [3]byte
}

type bpf_tpServerHttpFuncInvocationT struct {
	StartMonotimeNs uint64
	Tp              bpf_tpTpInfoT
	Method          [7]uint8
	Path            [100]uint8
	_               [5]byte
	ContentLength   uint64
	Status          uint64
}

type bpf_tpSqlFuncInvocationT struct {
	StartMonotimeNs uint64
	SqlParam        uint64
	QueryLen        uint64
	Conn            bpf_tpConnectionInfoT
	_               [4]byte
	Tp              bpf_tpTpInfoT
}

type bpf_tpTopicT struct {
	Name [64]int8
	Tp   bpf_tpTpInfoT
}

type bpf_tpTpInfoPidT struct {
	Tp      bpf_tpTpInfoT
	Pid     uint32
	Valid   uint8
	ReqType uint8
	_       [2]byte
}

type bpf_tpTpInfoT struct {
	TraceId  [16]uint8
	SpanId   [8]uint8
	ParentId [8]uint8
	Ts       uint64
	Flags    uint8
	_        [7]byte
}

type bpf_tpTraceMapKeyT struct {
	Conn bpf_tpConnectionInfoT
	Type uint32
}

// loadBpf_tp returns the embedded CollectionSpec for bpf_tp.
func loadBpf_tp() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Bpf_tpBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf_tp: %w", err)
	}

	return spec, err
}

// loadBpf_tpObjects loads bpf_tp and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpf_tpObjects
//	*bpf_tpPrograms
//	*bpf_tpMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpf_tpObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf_tp()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpf_tpSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpf_tpSpecs struct {
	bpf_tpProgramSpecs
	bpf_tpMapSpecs
}

// bpf_tpSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpf_tpProgramSpecs struct {
	BeU_CliConnClose   *ebpf.ProgramSpec `ebpf:"be_u_CliConnClose"`
	BeU_CliConnInvRet  *ebpf.ProgramSpec `ebpf:"be_u_CliConnInvRet"`
	BeU_CliConnInvoke  *ebpf.ProgramSpec `ebpf:"be_u_CliConnInvoke"`
	BeU_CliConnNewStr  *ebpf.ProgramSpec `ebpf:"be_u_CliConnNewStr"`
	BeU_CliConnStrRet  *ebpf.ProgramSpec `ebpf:"be_u_CliConnStrRet"`
	BeU_CliRndTrip     *ebpf.ProgramSpec `ebpf:"be_u_CliRndTrip"`
	BeU_CliStrRecvRet  *ebpf.ProgramSpec `ebpf:"be_u_CliStrRecvRet"`
	BeU_ConnServe      *ebpf.ProgramSpec `ebpf:"be_u_ConnServe"`
	BeU_ConnServeRet   *ebpf.ProgramSpec `ebpf:"be_u_ConnServeRet"`
	BeU_ExecDC         *ebpf.ProgramSpec `ebpf:"be_u_ExecDC"`
	BeU_GRPCFrmWrtHdr  *ebpf.ProgramSpec `ebpf:"be_u_GRPCFrmWrtHdr"`
	BeU_GRPCFrmWrtRet  *ebpf.ProgramSpec `ebpf:"be_u_GRPCFrmWrtRet"`
	BeU_GoExit0        *ebpf.ProgramSpec `ebpf:"be_u_GoExit0"`
	BeU_HTTP2CliNewStr *ebpf.ProgramSpec `ebpf:"be_u_HTTP2CliNewStr"`
	BeU_HTTP2ConnHdl   *ebpf.ProgramSpec `ebpf:"be_u_HTTP2ConnHdl"`
	BeU_HTTP2FrmRet    *ebpf.ProgramSpec `ebpf:"be_u_HTTP2FrmRet"`
	BeU_HTTP2FrmWrt    *ebpf.ProgramSpec `ebpf:"be_u_HTTP2FrmWrt"`
	BeU_HTTP2RTConn    *ebpf.ProgramSpec `ebpf:"be_u_HTTP2RTConn"`
	BeU_HTTP2RndTrip   *ebpf.ProgramSpec `ebpf:"be_u_HTTP2RndTrip"`
	BeU_HTTP2SrvHdr    *ebpf.ProgramSpec `ebpf:"be_u_HTTP2SrvHdr"`
	BeU_HTTP2SrvOpHdr  *ebpf.ProgramSpec `ebpf:"be_u_HTTP2SrvOpHdr"`
	BeU_HTTP2WrtHdr    *ebpf.ProgramSpec `ebpf:"be_u_HTTP2WrtHdr"`
	BeU_NetFdRead      *ebpf.ProgramSpec `ebpf:"be_u_NetFdRead"`
	BeU_NewProc1       *ebpf.ProgramSpec `ebpf:"be_u_NewProc1"`
	BeU_NewProc1Ret    *ebpf.ProgramSpec `ebpf:"be_u_NewProc1Ret"`
	BeU_PerConnRndTrp  *ebpf.ProgramSpec `ebpf:"be_u_PerConnRndTrp"`
	BeU_ProtoRndTrip   *ebpf.ProgramSpec `ebpf:"be_u_ProtoRndTrip"`
	BeU_ProtoRndTrpRet *ebpf.ProgramSpec `ebpf:"be_u_ProtoRndTrpRet"`
	BeU_QueryDC        *ebpf.ProgramSpec `ebpf:"be_u_QueryDC"`
	BeU_QueryDCRet     *ebpf.ProgramSpec `ebpf:"be_u_QueryDCRet"`
	BeU_ReadContRet    *ebpf.ProgramSpec `ebpf:"be_u_ReadContRet"`
	BeU_ReadReqRet     *ebpf.ProgramSpec `ebpf:"be_u_ReadReqRet"`
	BeU_ReadReqStart   *ebpf.ProgramSpec `ebpf:"be_u_ReadReqStart"`
	BeU_ReadRet        *ebpf.ProgramSpec `ebpf:"be_u_ReadRet"`
	BeU_ReadSendMsg    *ebpf.ProgramSpec `ebpf:"be_u_ReadSendMsg"`
	BeU_ReadStart      *ebpf.ProgramSpec `ebpf:"be_u_ReadStart"`
	BeU_RedisProcRet   *ebpf.ProgramSpec `ebpf:"be_u_RedisProcRet"`
	BeU_RedisProcess   *ebpf.ProgramSpec `ebpf:"be_u_RedisProcess"`
	BeU_RedisWrtRet    *ebpf.ProgramSpec `ebpf:"be_u_RedisWrtRet"`
	BeU_RedisWrtStart  *ebpf.ProgramSpec `ebpf:"be_u_RedisWrtStart"`
	BeU_RoundTrip      *ebpf.ProgramSpec `ebpf:"be_u_RoundTrip"`
	BeU_RoundTripRet   *ebpf.ProgramSpec `ebpf:"be_u_RoundTripRet"`
	BeU_SaramaBrkWrt   *ebpf.ProgramSpec `ebpf:"be_u_SaramaBrkWrt"`
	BeU_SaramaRspHdl   *ebpf.ProgramSpec `ebpf:"be_u_SaramaRspHdl"`
	BeU_SaramaSendInt  *ebpf.ProgramSpec `ebpf:"be_u_SaramaSendInt"`
	BeU_ServeHTTP      *ebpf.ProgramSpec `ebpf:"be_u_ServeHTTP"`
	BeU_ServeHTTPRet   *ebpf.ProgramSpec `ebpf:"be_u_ServeHTTPRet"`
	BeU_SrvHdlStr      *ebpf.ProgramSpec `ebpf:"be_u_SrvHdlStr"`
	BeU_SrvHdlStrRet   *ebpf.ProgramSpec `ebpf:"be_u_SrvHdlStrRet"`
	BeU_SrvHdlTrpStr   *ebpf.ProgramSpec `ebpf:"be_u_SrvHdlTrpStr"`
	BeU_TrpWrtStatus   *ebpf.ProgramSpec `ebpf:"be_u_TrpWrtStatus"`
	BeU_WriteSubset    *ebpf.ProgramSpec `ebpf:"be_u_WriteSubset"`
	BeU_WrtMsgStart    *ebpf.ProgramSpec `ebpf:"be_u_WrtMsgStart"`
	BeU_WrtProduce     *ebpf.ProgramSpec `ebpf:"be_u_WrtProduce"`
}

// bpf_tpMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpf_tpMapSpecs struct {
	Events                        *ebpf.MapSpec `ebpf:"events"`
	FetchRequests                 *ebpf.MapSpec `ebpf:"fetch_requests"`
	FramerInvocationMap           *ebpf.MapSpec `ebpf:"framer_invocation_map"`
	GoOffsetsMap                  *ebpf.MapSpec `ebpf:"go_offsets_map"`
	GoTraceMap                    *ebpf.MapSpec `ebpf:"go_trace_map"`
	GrpcFramerInvocationMap       *ebpf.MapSpec `ebpf:"grpc_framer_invocation_map"`
	HeaderReqMap                  *ebpf.MapSpec `ebpf:"header_req_map"`
	Http2ReqMap                   *ebpf.MapSpec `ebpf:"http2_req_map"`
	Http2ServerRequestsTp         *ebpf.MapSpec `ebpf:"http2_server_requests_tp"`
	IncomingTraceMap              *ebpf.MapSpec `ebpf:"incoming_trace_map"`
	KafkaRequests                 *ebpf.MapSpec `ebpf:"kafka_requests"`
	Newproc1                      *ebpf.MapSpec `ebpf:"newproc1"`
	OngoingClientConnections      *ebpf.MapSpec `ebpf:"ongoing_client_connections"`
	OngoingGoHttp                 *ebpf.MapSpec `ebpf:"ongoing_go_http"`
	OngoingGoroutines             *ebpf.MapSpec `ebpf:"ongoing_goroutines"`
	OngoingGrpcClientRequests     *ebpf.MapSpec `ebpf:"ongoing_grpc_client_requests"`
	OngoingGrpcHeaderWrites       *ebpf.MapSpec `ebpf:"ongoing_grpc_header_writes"`
	OngoingGrpcOperateHeaders     *ebpf.MapSpec `ebpf:"ongoing_grpc_operate_headers"`
	OngoingGrpcRequestStatus      *ebpf.MapSpec `ebpf:"ongoing_grpc_request_status"`
	OngoingGrpcServerRequests     *ebpf.MapSpec `ebpf:"ongoing_grpc_server_requests"`
	OngoingGrpcTransports         *ebpf.MapSpec `ebpf:"ongoing_grpc_transports"`
	OngoingHttpClientRequests     *ebpf.MapSpec `ebpf:"ongoing_http_client_requests"`
	OngoingHttpClientRequestsData *ebpf.MapSpec `ebpf:"ongoing_http_client_requests_data"`
	OngoingHttpServerRequests     *ebpf.MapSpec `ebpf:"ongoing_http_server_requests"`
	OngoingKafkaRequests          *ebpf.MapSpec `ebpf:"ongoing_kafka_requests"`
	OngoingProduceMessages        *ebpf.MapSpec `ebpf:"ongoing_produce_messages"`
	OngoingProduceTopics          *ebpf.MapSpec `ebpf:"ongoing_produce_topics"`
	OngoingRedisRequests          *ebpf.MapSpec `ebpf:"ongoing_redis_requests"`
	OngoingServerConnections      *ebpf.MapSpec `ebpf:"ongoing_server_connections"`
	OngoingSqlQueries             *ebpf.MapSpec `ebpf:"ongoing_sql_queries"`
	OngoingStreams                *ebpf.MapSpec `ebpf:"ongoing_streams"`
	OutgoingTraceMap              *ebpf.MapSpec `ebpf:"outgoing_trace_map"`
	ProduceRequests               *ebpf.MapSpec `ebpf:"produce_requests"`
	ProduceTraceparents           *ebpf.MapSpec `ebpf:"produce_traceparents"`
	RedisWrites                   *ebpf.MapSpec `ebpf:"redis_writes"`
	TraceMap                      *ebpf.MapSpec `ebpf:"trace_map"`
}

// bpf_tpObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpf_tpObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpf_tpObjects struct {
	bpf_tpPrograms
	bpf_tpMaps
}

func (o *bpf_tpObjects) Close() error {
	return _Bpf_tpClose(
		&o.bpf_tpPrograms,
		&o.bpf_tpMaps,
	)
}

// bpf_tpMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpf_tpObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpf_tpMaps struct {
	Events                        *ebpf.Map `ebpf:"events"`
	FetchRequests                 *ebpf.Map `ebpf:"fetch_requests"`
	FramerInvocationMap           *ebpf.Map `ebpf:"framer_invocation_map"`
	GoOffsetsMap                  *ebpf.Map `ebpf:"go_offsets_map"`
	GoTraceMap                    *ebpf.Map `ebpf:"go_trace_map"`
	GrpcFramerInvocationMap       *ebpf.Map `ebpf:"grpc_framer_invocation_map"`
	HeaderReqMap                  *ebpf.Map `ebpf:"header_req_map"`
	Http2ReqMap                   *ebpf.Map `ebpf:"http2_req_map"`
	Http2ServerRequestsTp         *ebpf.Map `ebpf:"http2_server_requests_tp"`
	IncomingTraceMap              *ebpf.Map `ebpf:"incoming_trace_map"`
	KafkaRequests                 *ebpf.Map `ebpf:"kafka_requests"`
	Newproc1                      *ebpf.Map `ebpf:"newproc1"`
	OngoingClientConnections      *ebpf.Map `ebpf:"ongoing_client_connections"`
	OngoingGoHttp                 *ebpf.Map `ebpf:"ongoing_go_http"`
	OngoingGoroutines             *ebpf.Map `ebpf:"ongoing_goroutines"`
	OngoingGrpcClientRequests     *ebpf.Map `ebpf:"ongoing_grpc_client_requests"`
	OngoingGrpcHeaderWrites       *ebpf.Map `ebpf:"ongoing_grpc_header_writes"`
	OngoingGrpcOperateHeaders     *ebpf.Map `ebpf:"ongoing_grpc_operate_headers"`
	OngoingGrpcRequestStatus      *ebpf.Map `ebpf:"ongoing_grpc_request_status"`
	OngoingGrpcServerRequests     *ebpf.Map `ebpf:"ongoing_grpc_server_requests"`
	OngoingGrpcTransports         *ebpf.Map `ebpf:"ongoing_grpc_transports"`
	OngoingHttpClientRequests     *ebpf.Map `ebpf:"ongoing_http_client_requests"`
	OngoingHttpClientRequestsData *ebpf.Map `ebpf:"ongoing_http_client_requests_data"`
	OngoingHttpServerRequests     *ebpf.Map `ebpf:"ongoing_http_server_requests"`
	OngoingKafkaRequests          *ebpf.Map `ebpf:"ongoing_kafka_requests"`
	OngoingProduceMessages        *ebpf.Map `ebpf:"ongoing_produce_messages"`
	OngoingProduceTopics          *ebpf.Map `ebpf:"ongoing_produce_topics"`
	OngoingRedisRequests          *ebpf.Map `ebpf:"ongoing_redis_requests"`
	OngoingServerConnections      *ebpf.Map `ebpf:"ongoing_server_connections"`
	OngoingSqlQueries             *ebpf.Map `ebpf:"ongoing_sql_queries"`
	OngoingStreams                *ebpf.Map `ebpf:"ongoing_streams"`
	OutgoingTraceMap              *ebpf.Map `ebpf:"outgoing_trace_map"`
	ProduceRequests               *ebpf.Map `ebpf:"produce_requests"`
	ProduceTraceparents           *ebpf.Map `ebpf:"produce_traceparents"`
	RedisWrites                   *ebpf.Map `ebpf:"redis_writes"`
	TraceMap                      *ebpf.Map `ebpf:"trace_map"`
}

func (m *bpf_tpMaps) Close() error {
	return _Bpf_tpClose(
		m.Events,
		m.FetchRequests,
		m.FramerInvocationMap,
		m.GoOffsetsMap,
		m.GoTraceMap,
		m.GrpcFramerInvocationMap,
		m.HeaderReqMap,
		m.Http2ReqMap,
		m.Http2ServerRequestsTp,
		m.IncomingTraceMap,
		m.KafkaRequests,
		m.Newproc1,
		m.OngoingClientConnections,
		m.OngoingGoHttp,
		m.OngoingGoroutines,
		m.OngoingGrpcClientRequests,
		m.OngoingGrpcHeaderWrites,
		m.OngoingGrpcOperateHeaders,
		m.OngoingGrpcRequestStatus,
		m.OngoingGrpcServerRequests,
		m.OngoingGrpcTransports,
		m.OngoingHttpClientRequests,
		m.OngoingHttpClientRequestsData,
		m.OngoingHttpServerRequests,
		m.OngoingKafkaRequests,
		m.OngoingProduceMessages,
		m.OngoingProduceTopics,
		m.OngoingRedisRequests,
		m.OngoingServerConnections,
		m.OngoingSqlQueries,
		m.OngoingStreams,
		m.OutgoingTraceMap,
		m.ProduceRequests,
		m.ProduceTraceparents,
		m.RedisWrites,
		m.TraceMap,
	)
}

// bpf_tpPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpf_tpObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpf_tpPrograms struct {
	BeU_CliConnClose   *ebpf.Program `ebpf:"be_u_CliConnClose"`
	BeU_CliConnInvRet  *ebpf.Program `ebpf:"be_u_CliConnInvRet"`
	BeU_CliConnInvoke  *ebpf.Program `ebpf:"be_u_CliConnInvoke"`
	BeU_CliConnNewStr  *ebpf.Program `ebpf:"be_u_CliConnNewStr"`
	BeU_CliConnStrRet  *ebpf.Program `ebpf:"be_u_CliConnStrRet"`
	BeU_CliRndTrip     *ebpf.Program `ebpf:"be_u_CliRndTrip"`
	BeU_CliStrRecvRet  *ebpf.Program `ebpf:"be_u_CliStrRecvRet"`
	BeU_ConnServe      *ebpf.Program `ebpf:"be_u_ConnServe"`
	BeU_ConnServeRet   *ebpf.Program `ebpf:"be_u_ConnServeRet"`
	BeU_ExecDC         *ebpf.Program `ebpf:"be_u_ExecDC"`
	BeU_GRPCFrmWrtHdr  *ebpf.Program `ebpf:"be_u_GRPCFrmWrtHdr"`
	BeU_GRPCFrmWrtRet  *ebpf.Program `ebpf:"be_u_GRPCFrmWrtRet"`
	BeU_GoExit0        *ebpf.Program `ebpf:"be_u_GoExit0"`
	BeU_HTTP2CliNewStr *ebpf.Program `ebpf:"be_u_HTTP2CliNewStr"`
	BeU_HTTP2ConnHdl   *ebpf.Program `ebpf:"be_u_HTTP2ConnHdl"`
	BeU_HTTP2FrmRet    *ebpf.Program `ebpf:"be_u_HTTP2FrmRet"`
	BeU_HTTP2FrmWrt    *ebpf.Program `ebpf:"be_u_HTTP2FrmWrt"`
	BeU_HTTP2RTConn    *ebpf.Program `ebpf:"be_u_HTTP2RTConn"`
	BeU_HTTP2RndTrip   *ebpf.Program `ebpf:"be_u_HTTP2RndTrip"`
	BeU_HTTP2SrvHdr    *ebpf.Program `ebpf:"be_u_HTTP2SrvHdr"`
	BeU_HTTP2SrvOpHdr  *ebpf.Program `ebpf:"be_u_HTTP2SrvOpHdr"`
	BeU_HTTP2WrtHdr    *ebpf.Program `ebpf:"be_u_HTTP2WrtHdr"`
	BeU_NetFdRead      *ebpf.Program `ebpf:"be_u_NetFdRead"`
	BeU_NewProc1       *ebpf.Program `ebpf:"be_u_NewProc1"`
	BeU_NewProc1Ret    *ebpf.Program `ebpf:"be_u_NewProc1Ret"`
	BeU_PerConnRndTrp  *ebpf.Program `ebpf:"be_u_PerConnRndTrp"`
	BeU_ProtoRndTrip   *ebpf.Program `ebpf:"be_u_ProtoRndTrip"`
	BeU_ProtoRndTrpRet *ebpf.Program `ebpf:"be_u_ProtoRndTrpRet"`
	BeU_QueryDC        *ebpf.Program `ebpf:"be_u_QueryDC"`
	BeU_QueryDCRet     *ebpf.Program `ebpf:"be_u_QueryDCRet"`
	BeU_ReadContRet    *ebpf.Program `ebpf:"be_u_ReadContRet"`
	BeU_ReadReqRet     *ebpf.Program `ebpf:"be_u_ReadReqRet"`
	BeU_ReadReqStart   *ebpf.Program `ebpf:"be_u_ReadReqStart"`
	BeU_ReadRet        *ebpf.Program `ebpf:"be_u_ReadRet"`
	BeU_ReadSendMsg    *ebpf.Program `ebpf:"be_u_ReadSendMsg"`
	BeU_ReadStart      *ebpf.Program `ebpf:"be_u_ReadStart"`
	BeU_RedisProcRet   *ebpf.Program `ebpf:"be_u_RedisProcRet"`
	BeU_RedisProcess   *ebpf.Program `ebpf:"be_u_RedisProcess"`
	BeU_RedisWrtRet    *ebpf.Program `ebpf:"be_u_RedisWrtRet"`
	BeU_RedisWrtStart  *ebpf.Program `ebpf:"be_u_RedisWrtStart"`
	BeU_RoundTrip      *ebpf.Program `ebpf:"be_u_RoundTrip"`
	BeU_RoundTripRet   *ebpf.Program `ebpf:"be_u_RoundTripRet"`
	BeU_SaramaBrkWrt   *ebpf.Program `ebpf:"be_u_SaramaBrkWrt"`
	BeU_SaramaRspHdl   *ebpf.Program `ebpf:"be_u_SaramaRspHdl"`
	BeU_SaramaSendInt  *ebpf.Program `ebpf:"be_u_SaramaSendInt"`
	BeU_ServeHTTP      *ebpf.Program `ebpf:"be_u_ServeHTTP"`
	BeU_ServeHTTPRet   *ebpf.Program `ebpf:"be_u_ServeHTTPRet"`
	BeU_SrvHdlStr      *ebpf.Program `ebpf:"be_u_SrvHdlStr"`
	BeU_SrvHdlStrRet   *ebpf.Program `ebpf:"be_u_SrvHdlStrRet"`
	BeU_SrvHdlTrpStr   *ebpf.Program `ebpf:"be_u_SrvHdlTrpStr"`
	BeU_TrpWrtStatus   *ebpf.Program `ebpf:"be_u_TrpWrtStatus"`
	BeU_WriteSubset    *ebpf.Program `ebpf:"be_u_WriteSubset"`
	BeU_WrtMsgStart    *ebpf.Program `ebpf:"be_u_WrtMsgStart"`
	BeU_WrtProduce     *ebpf.Program `ebpf:"be_u_WrtProduce"`
}

func (p *bpf_tpPrograms) Close() error {
	return _Bpf_tpClose(
		p.BeU_CliConnClose,
		p.BeU_CliConnInvRet,
		p.BeU_CliConnInvoke,
		p.BeU_CliConnNewStr,
		p.BeU_CliConnStrRet,
		p.BeU_CliRndTrip,
		p.BeU_CliStrRecvRet,
		p.BeU_ConnServe,
		p.BeU_ConnServeRet,
		p.BeU_ExecDC,
		p.BeU_GRPCFrmWrtHdr,
		p.BeU_GRPCFrmWrtRet,
		p.BeU_GoExit0,
		p.BeU_HTTP2CliNewStr,
		p.BeU_HTTP2ConnHdl,
		p.BeU_HTTP2FrmRet,
		p.BeU_HTTP2FrmWrt,
		p.BeU_HTTP2RTConn,
		p.BeU_HTTP2RndTrip,
		p.BeU_HTTP2SrvHdr,
		p.BeU_HTTP2SrvOpHdr,
		p.BeU_HTTP2WrtHdr,
		p.BeU_NetFdRead,
		p.BeU_NewProc1,
		p.BeU_NewProc1Ret,
		p.BeU_PerConnRndTrp,
		p.BeU_ProtoRndTrip,
		p.BeU_ProtoRndTrpRet,
		p.BeU_QueryDC,
		p.BeU_QueryDCRet,
		p.BeU_ReadContRet,
		p.BeU_ReadReqRet,
		p.BeU_ReadReqStart,
		p.BeU_ReadRet,
		p.BeU_ReadSendMsg,
		p.BeU_ReadStart,
		p.BeU_RedisProcRet,
		p.BeU_RedisProcess,
		p.BeU_RedisWrtRet,
		p.BeU_RedisWrtStart,
		p.BeU_RoundTrip,
		p.BeU_RoundTripRet,
		p.BeU_SaramaBrkWrt,
		p.BeU_SaramaRspHdl,
		p.BeU_SaramaSendInt,
		p.BeU_ServeHTTP,
		p.BeU_ServeHTTPRet,
		p.BeU_SrvHdlStr,
		p.BeU_SrvHdlStrRet,
		p.BeU_SrvHdlTrpStr,
		p.BeU_TrpWrtStatus,
		p.BeU_WriteSubset,
		p.BeU_WrtMsgStart,
		p.BeU_WrtProduce,
	)
}

func _Bpf_tpClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_tp_arm64_bpfel.o
var _Bpf_tpBytes []byte
