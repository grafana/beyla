syntax = "proto3";

package informer;

option go_package = "./informer";

// EventType represents the type of event.
enum EventType {
  CREATED = 0;
  UPDATED = 1;
  DELETED = 2;
  SYNC_FINISHED = 3;
}

message ObjectMeta {
  string name = 1;
  string namespace = 2;
  map<string,string> labels = 3;
  map<string,string> annotations = 8;
  repeated string ips = 4;
  string kind = 5;

  // If the Kube object is not a Pod, this field will be empty.
  optional PodInfo pod = 6;

  // Timestamp of the last status: creation/update/deletion, in Unix seconds
  // We don't need more precision as Kubernetes events are timestamped in seconds
  int64 status_time_epoch = 7;
}

message PodInfo {
  string uid = 1;
  string node_name = 2;
  string start_time_str = 3;
  string host_ip = 4;
  repeated ContainerInfo containers = 5;
  repeated Owner owners = 6;
}

message ContainerInfo {
  string id = 1;
  string name = 3;
  map<string,string> env = 2;
}

message Owner {
  string name = 1;
  string kind = 2;
}

// Event represents a single event.
message Event {
  // - avoids out-of-order events coming from different informers (local vs remote)
  // - on failure/reconnection you don't need to receive all the events again
  EventType type = 1;
  optional ObjectMeta resource = 2;
}

// Empty message for Subscribe RPC
message SubscribeMessage {
  int64 fromTimestampEpoch = 1;
}

// EventStreamService defines the gRPC service for event streaming.
service EventStreamService {
  // Subscribe allows clients to subscribe to a stream of events.
  rpc Subscribe(SubscribeMessage) returns (stream Event);
}