version: '3.8'

services:
  testserver:
    build:
      context: ../..
      dockerfile: test/integration/components/testserver/Dockerfile
    image: hatest-testserver
    ports:
      - "8080:8080"
    environment:
      LOG_LEVEL: DEBUG
  # another instance of the above image. Used to test the deduplication
  # of metrics when they come from the same executable file
  testserver-unused:
    image: hatest-testserver
    ports:
      - "38080:8080"
    environment:
      LOG_LEVEL: DEBUG

  testserver1:
    build:
      context: ../..
      dockerfile: test/integration/components/testserver/Dockerfile_rename1
    image: hatest-testserver1
    ports:
      - "8900:8900"
    environment:
      LOG_LEVEL: DEBUG
      
  # image that runs two instances of the 'testserver' executable
  # Used to test the deduplication
  # of metrics when they come from the same executable file
  testserver-duplicate:
    build:
      context: ../..
      dockerfile: test/integration/components/testserver/Dockerfile_duplicate
    image: hatest-testserver-duplicate
    ports:
      - "18080:18080"
      - "18090:18090"
    environment:
      LOG_LEVEL: DEBUG

  rtestserverssl:
    image: ghcr.io/grafana/beyla-test/greeting-rust-ssl/0.0.1
    ports:
      - 8491:8490
    environment:
      LOG_LEVEL: DEBUG

  pytestserverssl:
    build:
      context: ../..
      dockerfile: test/integration/components/pythonserver/Dockerfile_tls
    image: hatest-testserver-python-ssl
    ports:
      - 8381:8380

  ntestserverssl:
    build:
      context: ../..
      dockerfile: test/integration/components/nodejsserver/Dockerfile
    image: hatest-testserver-node-ssl
    command:
      - node
      - app_tls.js
    ports:
      - 3034:3033

  ntestserver:
    build:
      context: ../..
      dockerfile: test/integration/components/nodejsserver/Dockerfile
    image: hatest-testserver-node-ssl
    command:
      - node
      - app.js
    ports:
      - 3031:3030

  autoinstrumenter:
    build:
      context: ../..
      dockerfile: ./test/integration/components/beyla/Dockerfile
    command:
      - /beyla
      - --config=/configs/instrumenter-config-multiexec.yml
    volumes:
      - ./configs/:/configs
      - ../../testoutput:/coverage
      - ../../testoutput/run:/var/run/beyla
    image: hatest-autoinstrumenter
    privileged: true # in some environments (not GH Pull Requests) you can set it to false and then cap_add: [ SYS_ADMIN ]
    pid: "host"
    network_mode: "host"
    environment:
      GOCOVERDIR: "/coverage"
      BEYLA_PRINT_TRACES: "true"
      BEYLA_METRICS_INTERVAL: "10ms"
      BEYLA_BPF_BATCH_TIMEOUT: "10ms"
      BEYLA_LOG_LEVEL: "DEBUG"
      BEYLA_BPF_DEBUG: "TRUE"
      BEYLA_METRICS_REPORT_TARGET: "true"
      BEYLA_METRICS_REPORT_PEER: "true"
      BEYLA_HOSTNAME: "beyla"

  # OpenTelemetry Collector
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.77.0
    container_name: otel-col
    deploy:
      resources:
        limits:
          memory: 125M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config/otelcol-config.yml" ]
    volumes:
      - ./configs/:/etc/otelcol-config
    ports:
      - "4317"          # OTLP over gRPC receiver
      - "4318:4318"     # OTLP over HTTP receiver
      - "9464"          # Prometheus exporter
      - "8888"          # metrics endpoint
    depends_on:
      prometheus:
        condition: service_started

  # Prometheus
  prometheus:
    image: quay.io/prometheus/prometheus:v2.34.0
    container_name: prometheus
    command:
      - --storage.tsdb.retention.time=1m
      - --config.file=/etc/prometheus/prometheus-config.yml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
    volumes:
      - ./configs/:/etc/prometheus
    ports:
      - "9090:9090"
