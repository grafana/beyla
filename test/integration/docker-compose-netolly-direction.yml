version: '3.8'

services:
  testserver:
    build:
      context: ../..
      dockerfile: test/integration/components/testserver/Dockerfile${TESTSERVER_DOCKERFILE_SUFFIX}
    image: hatest-testserver
    ports:
      - "8080:8080"
      - "8081:8081"
      - "8082:8082"
      - "8083:8083"
      - "8087:8087"
      - "50051:50051"
    environment:
      LOG_LEVEL: DEBUG
      TARGET_URL: http://testserver2:8080

  testserver2:
    image: hatest-testserver
    environment:
      LOG_LEVEL: DEBUG
    depends_on:
      testserver:
        condition: service_started

  autoinstrumenter:
    build:
      context: ../..
      dockerfile: ./test/integration/components/beyla/Dockerfile
    volumes:
      - ./configs/:/configs
      - ./system/sys/kernel/security:/sys/kernel/security
      - ../../testoutput:/coverage
      - ../../testoutput/run:/var/run/beyla
    image: hatest-autoinstrumenter
    privileged: true
    network_mode: service:testserver
    environment:
      BEYLA_CONFIG_PATH: /configs/instrumenter-config-netolly${BEYLA_CONFIG_SUFFIX}.yml
      GOCOVERDIR: "/coverage"
      BEYLA_NETWORK_SOURCE: ${BEYLA_NETWORK_SOURCE}
      BEYLA_NETWORK_METRICS: "true"
      BEYLA_NETWORK_PRINT_FLOWS: "true"
      BEYLA_NETWORK_DEDUPER: ${BEYLA_NETWORK_DEDUPER}
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otelcol:4318
      BEYLA_LOG_LEVEL: "DEBUG"
      BEYLA_BPF_DEBUG: "TRUE"
      BEYLA_HOSTNAME: "beyla"

  # OpenTelemetry Collector for Metrics. For Traces, we use directly Jaeger
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.85.0
    container_name: otel-col
    deploy:
      resources:
        limits:
          memory: 125M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config/otelcol-config.yml" ]
    volumes:
      - ./configs/:/etc/otelcol-config
    ports:
      - "4317"          # OTLP over gRPC receiver
      - "4318"          # OTLP over HTTP receiver
      - "9464"          # Prometheus exporter
      - "8888"          # metrics endpoint
    depends_on:
      prometheus:
        condition: service_started

  # Prometheus
  prometheus:
    image: quay.io/prometheus/prometheus:v2.46.0
    container_name: prometheus
    command:
      - --storage.tsdb.retention.time=1m
      - --config.file=/etc/prometheus/prometheus-config${PROM_CONFIG_SUFFIX}.yml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
    volumes:
      - ./configs/:/etc/prometheus
    ports:
      - "9090:9090"
