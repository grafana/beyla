version: '3.8'

services:
  testserver:
    image: ghcr.io/grafana/beyla-test/greeting-rails${TESTSERVER_IMAGE_SUFFIX}/0.0.1
    ports:
      - "${TEST_SERVICE_PORTS}"
    environment:
      OTEL_SERVICE_NAME: "my-ruby-app"
      OTEL_RESOURCE_ATTRIBUTES: "data-center=ca,deployment-zone=to"
    depends_on:
      otelcol:
        condition: service_started

  nginx:
    image: nginx:latest
    container_name: nginx_server
    ports:
      - "8443:443" # Expose TLS port
    volumes:
      - ./components/rubytestserver/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./components/rubytestserver/nginx/cert.pem:/etc/nginx/cert.pem:ro
      - ./components/rubytestserver/nginx/key.pem:/etc/nginx/key.pem:ro
    depends_on:
      - testserver
      
  autoinstrumenter:
    build:
      context: ../..
      dockerfile: ./test/integration/components/beyla/Dockerfile
    command:
      - --config=/configs/instrumenter-config-ruby.yml
    volumes:
      - ./configs/:/configs
      - ./system/sys/kernel/security:/sys/kernel/security
      - ../../testoutput:/coverage
      - ../../testoutput/run-ruby:/var/run/beyla
    image: hatest-autoinstrumenter
    privileged: true # in some environments (not GH Pull Requests) you can set it to false and then cap_add: [ SYS_ADMIN ]
    network_mode: "host"
    pid: "host"
    environment:
      GOCOVERDIR: "/coverage"
      BEYLA_TRACE_PRINTER: "text"
      BEYLA_OPEN_PORT: "${BEYLA_OPEN_PORT}"
      BEYLA_DISCOVERY_POLL_INTERVAL: 500ms
      BEYLA_EXECUTABLE_NAME: "${BEYLA_EXECUTABLE_NAME}"
      BEYLA_SERVICE_NAMESPACE: "integration-test"
      BEYLA_METRICS_INTERVAL: "10ms"
      BEYLA_BPF_BATCH_TIMEOUT: "10ms"
      BEYLA_LOG_LEVEL: "DEBUG"
      BEYLA_BPF_DEBUG: "TRUE"
      BEYLA_HOSTNAME: "beyla"
    depends_on:
      testserver:
        condition: service_started

  # OpenTelemetry Collector
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.104.0
    container_name: otel-col
    deploy:
      resources:
        limits:
          memory: 125M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config/otelcol-config.yml" ]
    volumes:
      - ./configs/:/etc/otelcol-config
    ports:
      - "4317:4317"     # OTLP over gRPC receiver
      - "4318:4318"     # OTLP over HTTP receiver
      - "9464"          # Prometheus exporter
      - "8888"          # metrics endpoint
    depends_on:
      prometheus:
        condition: service_started

  # Prometheus
  prometheus:
    image: quay.io/prometheus/prometheus:v2.55.1
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus-config.yml
      - --web.enable-lifecycle
      - --web.route-prefix=/
    volumes:
      - ./configs/:/etc/prometheus
    ports:
      - "9090:9090"

  # Jaeger for Traces
  jaeger:
    image: jaegertracing/all-in-one:1.57
    ports:
      - "16686:16686" # Query frontend
      - "4417:4317"        # OTEL GRPC traces collector
      - "4418:4318"        # OTEL HTTP traces collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=debug