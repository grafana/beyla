version: '3.8'

services:
  testserver:
    build:
      context: ../..
      dockerfile: test/integration/components/testserver/Dockerfile${TESTSERVER_DOCKERFILE_SUFFIX}
    image: hatest-testserver
    ports:
      - "8080:8080"
      - "8081:8081"
      - "8082:8082"
      - "8083:8083"
      - "8087:8087"
      - "8383:8383"
      - "5051:5051"
      - "50051:50051"
    environment:
      LOG_LEVEL: DEBUG

  autoinstrumenter:
    build:
      context: ../..
      dockerfile: ./test/integration/components/beyla/Dockerfile
    command:
      - --config=/configs/instrumenter-config${INSTRUMENTER_CONFIG_SUFFIX}.yml
    volumes:
      - ./configs/:/configs
      - ./system/sys/kernel/security${SECURITY_CONFIG_SUFFIX}:/sys/kernel/security
      - ../../testoutput:/coverage
      - ../../testoutput/run-base${TESTSERVER_DOCKERFILE_SUFFIX}:/var/run/beyla
    image: hatest-autoinstrumenter
    privileged: true # in some environments (not GH Pull Requests) you can set it to false and then cap_add: [ SYS_ADMIN ]
    pid: "service:testserver"
    environment:
      GOCOVERDIR: "/coverage"
      BEYLA_TRACE_PRINTER: "json"
      BEYLA_OPEN_PORT: "${BEYLA_OPEN_PORT}"
      BEYLA_OTEL_METRICS_FEATURES: "application,application_span,application_process,application_service_graph,ebpf"
      BEYLA_PROMETHEUS_FEATURES: "application,application_span,application_process,application_service_graph,ebpf"
      BEYLA_DISCOVERY_POLL_INTERVAL: 500ms
      BEYLA_EXECUTABLE_NAME: "${BEYLA_EXECUTABLE_NAME}"
      BEYLA_SKIP_GO_SPECIFIC_TRACERS: "${BEYLA_SKIP_GO_SPECIFIC_TRACERS}"
      BEYLA_SERVICE_NAMESPACE: "integration-test"
      BEYLA_METRICS_INTERVAL: "10ms"
      BEYLA_BPF_BATCH_TIMEOUT: "10ms"
      BEYLA_LOG_LEVEL: "DEBUG"
      BEYLA_BPF_DEBUG: "TRUE"
      BEYLA_INTERNAL_METRICS_PROMETHEUS_PORT: 8999
      BEYLA_PROCESSES_INTERVAL: "100ms"
      BEYLA_HOSTNAME: "beyla"
    ports:
      - "8999:8999" # Prometheus scrape port, if enabled via config

  # OpenTelemetry Collector for Metrics. For Traces, we use directly Jaeger
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.118.0
    container_name: otel-col
    deploy:
      resources:
        limits:
          memory: 125M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config/otelcol-config.yml" ]
    volumes:
      - ./configs/:/etc/otelcol-config
    ports:
      - "4317"          # OTLP over gRPC receiver
      - "4318"          # OTLP over HTTP receiver
      - "9464"          # Prometheus exporter
      - "8888"          # metrics endpoint
    depends_on:
      autoinstrumenter:
        condition: service_started
      prometheus:
        condition: service_started

  # Prometheus
  prometheus:
    image: quay.io/prometheus/prometheus:v2.55.1
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus-config${PROM_CONFIG_SUFFIX}.yml
      - --web.enable-lifecycle
      - --enable-feature=exemplar-storage
      - --web.route-prefix=/
    volumes:
      - ./configs/:/etc/prometheus
    ports:
      - "9090:9090"

  jaeger:
    image: jaegertracing/all-in-one:1.57
    ports:
      - "16686:16686" # Query frontend
      - "4317"        # OTEL GRPC traces collector
      - "4318"        # OTEL HTTP traces collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=debug

# curl http://localhost:16686/api/services
# curl http://localhost:16686/api/traces?service=testserver
