// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64

package gotracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type BpfTPDebugConnectionInfoT struct {
	_      structs.HostLayout
	S_addr [16]uint8
	D_addr [16]uint8
	S_port uint16
	D_port uint16
}

type BpfTPDebugEgressKeyT struct {
	_      structs.HostLayout
	S_port uint16
	D_port uint16
}

type BpfTPDebugFramerFuncInvocationT struct {
	_         structs.HostLayout
	FramerPtr uint64
	Tp        BpfTPDebugTpInfoT
	InitialN  int64
}

type BpfTPDebugGoAddrKeyT struct {
	_    structs.HostLayout
	Pid  uint64
	Addr uint64
}

type BpfTPDebugGoroutineMetadata struct {
	_         structs.HostLayout
	Parent    BpfTPDebugGoAddrKeyT
	Timestamp uint64
}

type BpfTPDebugGrpcClientFuncInvocationT struct {
	_               structs.HostLayout
	StartMonotimeNs uint64
	Cc              uint64
	Method          uint64
	MethodLen       uint64
	Tp              BpfTPDebugTpInfoT
	Flags           uint64
}

type BpfTPDebugGrpcFramerFuncInvocationT struct {
	_         structs.HostLayout
	FramerPtr uint64
	Tp        BpfTPDebugTpInfoT
	Offset    int64
}

type BpfTPDebugGrpcSrvFuncInvocationT struct {
	_               structs.HostLayout
	StartMonotimeNs uint64
	Stream          uint64
	St              uint64
	Tp              BpfTPDebugTpInfoT
}

type BpfTPDebugGrpcTransportsT struct {
	_    structs.HostLayout
	Conn BpfTPDebugConnectionInfoT
	Type uint8
	Pad  [3]uint8
	Tp   BpfTPDebugTpInfoT
}

type BpfTPDebugHttpClientDataT struct {
	_             structs.HostLayout
	ContentLength int64
	Pid           struct {
		_       structs.HostLayout
		HostPid uint32
		UserPid uint32
		Ns      uint32
	}
	Path   [100]uint8
	Host   [100]uint8
	Scheme [10]uint8
	Method [7]uint8
	Pad    [3]uint8
}

type BpfTPDebugHttpFuncInvocationT struct {
	_               structs.HostLayout
	StartMonotimeNs uint64
	Tp              BpfTPDebugTpInfoT
}

type BpfTPDebugKafkaClientReqT struct {
	_               structs.HostLayout
	Type            uint8
	Pad             [7]uint8
	StartMonotimeNs uint64
	EndMonotimeNs   uint64
	Buf             [256]uint8
	Conn            BpfTPDebugConnectionInfoT
	Pid             struct {
		_       structs.HostLayout
		HostPid uint32
		UserPid uint32
		Ns      uint32
	}
}

type BpfTPDebugKafkaGoReqT struct {
	_    structs.HostLayout
	Type uint8
	Op   uint8
	Pad0 [2]uint8
	Pid  struct {
		_       structs.HostLayout
		HostPid uint32
		UserPid uint32
		Ns      uint32
	}
	Conn            BpfTPDebugConnectionInfoT
	Pad1            [4]uint8
	Tp              BpfTPDebugTpInfoT
	StartMonotimeNs uint64
	EndMonotimeNs   uint64
	Topic           [64]uint8
}

type BpfTPDebugNewFuncInvocationT struct {
	_      structs.HostLayout
	Parent uint64
}

type BpfTPDebugOffTableT struct {
	_     structs.HostLayout
	Table [59]uint64
}

type BpfTPDebugOtelSpanT struct {
	_         structs.HostLayout
	Type      uint8
	Pad       [7]uint8
	StartTime uint64
	EndTime   uint64
	ParentGo  uint64
	Tp        BpfTPDebugTpInfoT
	PrevTp    BpfTPDebugTpInfoT
	Status    uint32
	SpanName  struct {
		_   structs.HostLayout
		Buf [64]uint8
	}
	SpanDescription struct {
		_   structs.HostLayout
		Buf [64]uint8
	}
	Pid struct {
		_       structs.HostLayout
		HostPid uint32
		UserPid uint32
		Ns      uint32
	}
	SpanAttrs struct {
		_     structs.HostLayout
		Attrs [16]struct {
			_         structs.HostLayout
			ValLength uint16
			Vtype     uint8
			Reserved  uint8
			Key       [32]uint8
			Value     [128]uint8
		}
		ValidAttrs uint8
		Apad       uint8
	}
	Epad [6]uint8
}

type BpfTPDebugProduceReqT struct {
	_               structs.HostLayout
	MsgPtr          uint64
	ConnPtr         uint64
	StartMonotimeNs uint64
}

type BpfTPDebugRedisClientReqT struct {
	_               structs.HostLayout
	Type            uint8
	Err             uint8
	Pad             [6]uint8
	StartMonotimeNs uint64
	EndMonotimeNs   uint64
	Pid             struct {
		_       structs.HostLayout
		HostPid uint32
		UserPid uint32
		Ns      uint32
	}
	Buf  [256]uint8
	Conn BpfTPDebugConnectionInfoT
	Tp   BpfTPDebugTpInfoT
}

type BpfTPDebugServerHttpFuncInvocationT struct {
	_               structs.HostLayout
	StartMonotimeNs uint64
	ContentLength   uint64
	ResponseLength  uint64
	Status          uint64
	BodyAddr        uint64
	Tp              BpfTPDebugTpInfoT
	ContentType     [16]uint8
	Method          [7]uint8
	Path            [100]uint8
	JsonContentType uint8
	Pad             [4]uint8
}

type BpfTPDebugSpanInfoT struct {
	_    structs.HostLayout
	Name struct {
		_   structs.HostLayout
		Buf [64]uint8
	}
	OptsPtr uint64
	OptsLen uint64
}

type BpfTPDebugSqlFuncInvocationT struct {
	_               structs.HostLayout
	StartMonotimeNs uint64
	SqlParam        uint64
	QueryLen        uint64
	Tp              BpfTPDebugTpInfoT
	Conn            BpfTPDebugConnectionInfoT
	Pad             [4]uint8
}

type BpfTPDebugStreamKeyT struct {
	_        structs.HostLayout
	ConnPtr  uint64
	StreamId uint32
	Pad      uint32
}

type BpfTPDebugTopicT struct {
	_    structs.HostLayout
	Name [64]int8
	Tp   BpfTPDebugTpInfoT
}

type BpfTPDebugTpInfoPidT struct {
	_       structs.HostLayout
	Tp      BpfTPDebugTpInfoT
	Pid     uint32
	Valid   uint8
	Written uint8
	ReqType uint8
	Pad     [1]uint8
}

type BpfTPDebugTpInfoT struct {
	_        structs.HostLayout
	TraceId  [16]uint8
	SpanId   [8]uint8
	ParentId [8]uint8
	Ts       uint64
	Flags    uint8
	Pad      [7]uint8
}

type BpfTPDebugTraceMapKeyT struct {
	_    structs.HostLayout
	Conn BpfTPDebugConnectionInfoT
	Type uint32
}

type BpfTPDebugTransportNewClientInvocationT struct {
	_     structs.HostLayout
	Inv   BpfTPDebugGrpcClientFuncInvocationT
	S_key BpfTPDebugStreamKeyT
}

// LoadBpfTPDebug returns the embedded CollectionSpec for BpfTPDebug.
func LoadBpfTPDebug() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfTPDebugBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load BpfTPDebug: %w", err)
	}

	return spec, err
}

// LoadBpfTPDebugObjects loads BpfTPDebug and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*BpfTPDebugObjects
//	*BpfTPDebugPrograms
//	*BpfTPDebugMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadBpfTPDebugObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadBpfTPDebug()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// BpfTPDebugSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfTPDebugSpecs struct {
	BpfTPDebugProgramSpecs
	BpfTPDebugMapSpecs
	BpfTPDebugVariableSpecs
}

// BpfTPDebugProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfTPDebugProgramSpecs struct {
	BeylaReadJsonrpcMethod                          *ebpf.ProgramSpec `ebpf:"beyla_read_jsonrpc_method"`
	BeylaUprobeClientConnClose                      *ebpf.ProgramSpec `ebpf:"beyla_uprobe_ClientConn_Close"`
	BeylaUprobeClientConnInvoke                     *ebpf.ProgramSpec `ebpf:"beyla_uprobe_ClientConn_Invoke"`
	BeylaUprobeClientConnInvokeReturn               *ebpf.ProgramSpec `ebpf:"beyla_uprobe_ClientConn_Invoke_return"`
	BeylaUprobeClientConnNewStream                  *ebpf.ProgramSpec `ebpf:"beyla_uprobe_ClientConn_NewStream"`
	BeylaUprobeClientConnNewStreamReturn            *ebpf.ProgramSpec `ebpf:"beyla_uprobe_ClientConn_NewStream_return"`
	BeylaUprobeRecordError                          *ebpf.ProgramSpec `ebpf:"beyla_uprobe_RecordError"`
	BeylaUprobeServeHTTP                            *ebpf.ProgramSpec `ebpf:"beyla_uprobe_ServeHTTP"`
	BeylaUprobeServeHTTPReturns                     *ebpf.ProgramSpec `ebpf:"beyla_uprobe_ServeHTTPReturns"`
	BeylaUprobeSetAttributes                        *ebpf.ProgramSpec `ebpf:"beyla_uprobe_SetAttributes"`
	BeylaUprobeSetName                              *ebpf.ProgramSpec `ebpf:"beyla_uprobe_SetName"`
	BeylaUprobeSetStatus                            *ebpf.ProgramSpec `ebpf:"beyla_uprobe_SetStatus"`
	BeylaUprobeBodyRead                             *ebpf.ProgramSpec `ebpf:"beyla_uprobe_bodyRead"`
	BeylaUprobeBodyReadReturn                       *ebpf.ProgramSpec `ebpf:"beyla_uprobe_bodyReadReturn"`
	BeylaUprobeClientStreamRecvMsgReturn            *ebpf.ProgramSpec `ebpf:"beyla_uprobe_clientStream_RecvMsg_return"`
	BeylaUprobeClientRoundTrip                      *ebpf.ProgramSpec `ebpf:"beyla_uprobe_client_roundTrip"`
	BeylaUprobeConnServe                            *ebpf.ProgramSpec `ebpf:"beyla_uprobe_connServe"`
	BeylaUprobeConnServeRet                         *ebpf.ProgramSpec `ebpf:"beyla_uprobe_connServeRet"`
	BeylaUprobeExecDC                               *ebpf.ProgramSpec `ebpf:"beyla_uprobe_execDC"`
	BeylaUprobeGrpcFramerWriteHeaders               *ebpf.ProgramSpec `ebpf:"beyla_uprobe_grpcFramerWriteHeaders"`
	BeylaUprobeGrpcFramerWriteHeadersReturns        *ebpf.ProgramSpec `ebpf:"beyla_uprobe_grpcFramerWriteHeaders_returns"`
	BeylaUprobeHttp2FramerWriteHeaders              *ebpf.ProgramSpec `ebpf:"beyla_uprobe_http2FramerWriteHeaders"`
	BeylaUprobeHttp2FramerWriteHeadersReturns       *ebpf.ProgramSpec `ebpf:"beyla_uprobe_http2FramerWriteHeaders_returns"`
	BeylaUprobeHttp2ResponseWriterStateWriteHeader  *ebpf.ProgramSpec `ebpf:"beyla_uprobe_http2ResponseWriterStateWriteHeader"`
	BeylaUprobeHttp2RoundTrip                       *ebpf.ProgramSpec `ebpf:"beyla_uprobe_http2RoundTrip"`
	BeylaUprobeHttp2ServerOperateHeaders            *ebpf.ProgramSpec `ebpf:"beyla_uprobe_http2Server_operateHeaders"`
	BeylaUprobeHttp2ServerProcessHeaders            *ebpf.ProgramSpec `ebpf:"beyla_uprobe_http2Server_processHeaders"`
	BeylaUprobeHttp2WriteHeaders                    *ebpf.ProgramSpec `ebpf:"beyla_uprobe_http2WriteHeaders"`
	BeylaUprobeHttp2WriteHeadersVendored            *ebpf.ProgramSpec `ebpf:"beyla_uprobe_http2WriteHeaders_vendored"`
	BeylaUprobeHttp2serverConnRunHandler            *ebpf.ProgramSpec `ebpf:"beyla_uprobe_http2serverConn_runHandler"`
	BeylaUprobeNetFdRead                            *ebpf.ProgramSpec `ebpf:"beyla_uprobe_netFdRead"`
	BeylaUprobeNonRecordingSpanEnd                  *ebpf.ProgramSpec `ebpf:"beyla_uprobe_nonRecordingSpan_End"`
	BeylaUprobePersistConnRoundTrip                 *ebpf.ProgramSpec `ebpf:"beyla_uprobe_persistConnRoundTrip"`
	BeylaUprobeProcGoexit1                          *ebpf.ProgramSpec `ebpf:"beyla_uprobe_proc_goexit1"`
	BeylaUprobeProcNewproc1                         *ebpf.ProgramSpec `ebpf:"beyla_uprobe_proc_newproc1"`
	BeylaUprobeProcNewproc1Ret                      *ebpf.ProgramSpec `ebpf:"beyla_uprobe_proc_newproc1_ret"`
	BeylaUprobeProtocolRoundtrip                    *ebpf.ProgramSpec `ebpf:"beyla_uprobe_protocol_roundtrip"`
	BeylaUprobeProtocolRoundtripRet                 *ebpf.ProgramSpec `ebpf:"beyla_uprobe_protocol_roundtrip_ret"`
	BeylaUprobeQueryDC                              *ebpf.ProgramSpec `ebpf:"beyla_uprobe_queryDC"`
	BeylaUprobeQueryReturn                          *ebpf.ProgramSpec `ebpf:"beyla_uprobe_queryReturn"`
	BeylaUprobeReadContinuedLineSliceReturns        *ebpf.ProgramSpec `ebpf:"beyla_uprobe_readContinuedLineSliceReturns"`
	BeylaUprobeReadRequestReturns                   *ebpf.ProgramSpec `ebpf:"beyla_uprobe_readRequestReturns"`
	BeylaUprobeReadRequestStart                     *ebpf.ProgramSpec `ebpf:"beyla_uprobe_readRequestStart"`
	BeylaUprobeReaderRead                           *ebpf.ProgramSpec `ebpf:"beyla_uprobe_reader_read"`
	BeylaUprobeReaderReadRet                        *ebpf.ProgramSpec `ebpf:"beyla_uprobe_reader_read_ret"`
	BeylaUprobeReaderSendMessage                    *ebpf.ProgramSpec `ebpf:"beyla_uprobe_reader_send_message"`
	BeylaUprobeRedisProcess                         *ebpf.ProgramSpec `ebpf:"beyla_uprobe_redis_process"`
	BeylaUprobeRedisProcessRet                      *ebpf.ProgramSpec `ebpf:"beyla_uprobe_redis_process_ret"`
	BeylaUprobeRedisWithWriter                      *ebpf.ProgramSpec `ebpf:"beyla_uprobe_redis_with_writer"`
	BeylaUprobeRedisWithWriterRet                   *ebpf.ProgramSpec `ebpf:"beyla_uprobe_redis_with_writer_ret"`
	BeylaUprobeRoundTrip                            *ebpf.ProgramSpec `ebpf:"beyla_uprobe_roundTrip"`
	BeylaUprobeRoundTripReturn                      *ebpf.ProgramSpec `ebpf:"beyla_uprobe_roundTripReturn"`
	BeylaUprobeSaramaBrokerWrite                    *ebpf.ProgramSpec `ebpf:"beyla_uprobe_sarama_broker_write"`
	BeylaUprobeSaramaResponsePromiseHandle          *ebpf.ProgramSpec `ebpf:"beyla_uprobe_sarama_response_promise_handle"`
	BeylaUprobeSaramaSendInternal                   *ebpf.ProgramSpec `ebpf:"beyla_uprobe_sarama_sendInternal"`
	BeylaUprobeServerHandleStream                   *ebpf.ProgramSpec `ebpf:"beyla_uprobe_server_handleStream"`
	BeylaUprobeServerHandleStreamReturn             *ebpf.ProgramSpec `ebpf:"beyla_uprobe_server_handleStream_return"`
	BeylaUprobeServerHandlerTransportHandleStreams  *ebpf.ProgramSpec `ebpf:"beyla_uprobe_server_handler_transport_handle_streams"`
	BeylaUprobeTracerStart                          *ebpf.ProgramSpec `ebpf:"beyla_uprobe_tracer_Start"`
	BeylaUprobeTracerStartReturns                   *ebpf.ProgramSpec `ebpf:"beyla_uprobe_tracer_Start_Returns"`
	BeylaUprobeTracerStartGlobal                    *ebpf.ProgramSpec `ebpf:"beyla_uprobe_tracer_Start_global"`
	BeylaUprobeTransportHttp2ClientNewStream        *ebpf.ProgramSpec `ebpf:"beyla_uprobe_transport_http2Client_NewStream"`
	BeylaUprobeTransportHttp2ClientNewStreamReturns *ebpf.ProgramSpec `ebpf:"beyla_uprobe_transport_http2Client_NewStream_Returns"`
	BeylaUprobeTransportWriteStatus                 *ebpf.ProgramSpec `ebpf:"beyla_uprobe_transport_writeStatus"`
	BeylaUprobeWriteSubset                          *ebpf.ProgramSpec `ebpf:"beyla_uprobe_writeSubset"`
	BeylaUprobeWriterProduce                        *ebpf.ProgramSpec `ebpf:"beyla_uprobe_writer_produce"`
	BeylaUprobeWriterWriteMessages                  *ebpf.ProgramSpec `ebpf:"beyla_uprobe_writer_write_messages"`
}

// BpfTPDebugMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfTPDebugMapSpecs struct {
	ActiveSpans                   *ebpf.MapSpec `ebpf:"active_spans"`
	DebugEvents                   *ebpf.MapSpec `ebpf:"debug_events"`
	Events                        *ebpf.MapSpec `ebpf:"events"`
	FetchRequests                 *ebpf.MapSpec `ebpf:"fetch_requests"`
	FramerInvocationMap           *ebpf.MapSpec `ebpf:"framer_invocation_map"`
	GoOffsetsMap                  *ebpf.MapSpec `ebpf:"go_offsets_map"`
	GoOngoingHttp                 *ebpf.MapSpec `ebpf:"go_ongoing_http"`
	GoOngoingHttpClientRequests   *ebpf.MapSpec `ebpf:"go_ongoing_http_client_requests"`
	GoTraceMap                    *ebpf.MapSpec `ebpf:"go_trace_map"`
	GrpcFramerInvocationMap       *ebpf.MapSpec `ebpf:"grpc_framer_invocation_map"`
	HeaderReqMap                  *ebpf.MapSpec `ebpf:"header_req_map"`
	Http2ReqMap                   *ebpf.MapSpec `ebpf:"http2_req_map"`
	Http2ServerRequestsTp         *ebpf.MapSpec `ebpf:"http2_server_requests_tp"`
	IncomingTraceMap              *ebpf.MapSpec `ebpf:"incoming_trace_map"`
	JsonrpcJumpTable              *ebpf.MapSpec `ebpf:"jsonrpc_jump_table"`
	KafkaRequests                 *ebpf.MapSpec `ebpf:"kafka_requests"`
	Newproc1                      *ebpf.MapSpec `ebpf:"newproc1"`
	OngoingClientConnections      *ebpf.MapSpec `ebpf:"ongoing_client_connections"`
	OngoingGoroutines             *ebpf.MapSpec `ebpf:"ongoing_goroutines"`
	OngoingGrpcClientRequests     *ebpf.MapSpec `ebpf:"ongoing_grpc_client_requests"`
	OngoingGrpcHeaderWrites       *ebpf.MapSpec `ebpf:"ongoing_grpc_header_writes"`
	OngoingGrpcOperateHeaders     *ebpf.MapSpec `ebpf:"ongoing_grpc_operate_headers"`
	OngoingGrpcRequestStatus      *ebpf.MapSpec `ebpf:"ongoing_grpc_request_status"`
	OngoingGrpcServerRequests     *ebpf.MapSpec `ebpf:"ongoing_grpc_server_requests"`
	OngoingGrpcTransports         *ebpf.MapSpec `ebpf:"ongoing_grpc_transports"`
	OngoingHttpClientRequestsData *ebpf.MapSpec `ebpf:"ongoing_http_client_requests_data"`
	OngoingHttpServerRequests     *ebpf.MapSpec `ebpf:"ongoing_http_server_requests"`
	OngoingKafkaRequests          *ebpf.MapSpec `ebpf:"ongoing_kafka_requests"`
	OngoingProduceMessages        *ebpf.MapSpec `ebpf:"ongoing_produce_messages"`
	OngoingProduceTopics          *ebpf.MapSpec `ebpf:"ongoing_produce_topics"`
	OngoingRedisRequests          *ebpf.MapSpec `ebpf:"ongoing_redis_requests"`
	OngoingServerConnections      *ebpf.MapSpec `ebpf:"ongoing_server_connections"`
	OngoingSqlQueries             *ebpf.MapSpec `ebpf:"ongoing_sql_queries"`
	OngoingStreams                *ebpf.MapSpec `ebpf:"ongoing_streams"`
	OutgoingTraceMap              *ebpf.MapSpec `ebpf:"outgoing_trace_map"`
	ProduceRequests               *ebpf.MapSpec `ebpf:"produce_requests"`
	ProduceTraceparents           *ebpf.MapSpec `ebpf:"produce_traceparents"`
	RedisWrites                   *ebpf.MapSpec `ebpf:"redis_writes"`
	SpanMem                       *ebpf.MapSpec `ebpf:"span_mem"`
	SpanNames                     *ebpf.MapSpec `ebpf:"span_names"`
	TempBodyMemStore              *ebpf.MapSpec `ebpf:"temp_body_mem_store"`
	TempHeaderMemStore            *ebpf.MapSpec `ebpf:"temp_header_mem_store"`
	TraceMap                      *ebpf.MapSpec `ebpf:"trace_map"`
	TransportNewClientInvocations *ebpf.MapSpec `ebpf:"transport_new_client_invocations"`
}

// BpfTPDebugVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfTPDebugVariableSpecs struct {
	ERROR_KEY            *ebpf.VariableSpec `ebpf:"ERROR_KEY"`
	ERROR_KEY_SIZE       *ebpf.VariableSpec `ebpf:"ERROR_KEY_SIZE"`
	EXTEND_SIZE          *ebpf.VariableSpec `ebpf:"EXTEND_SIZE"`
	INVALID_POS          *ebpf.VariableSpec `ebpf:"INVALID_POS"`
	TP                   *ebpf.VariableSpec `ebpf:"TP"`
	TP_PREFIX            *ebpf.VariableSpec `ebpf:"TP_PREFIX"`
	TP_PREFIX_SIZE       *ebpf.VariableSpec `ebpf:"TP_PREFIX_SIZE"`
	AttrTypeBool         *ebpf.VariableSpec `ebpf:"attr_type_bool"`
	AttrTypeBoolslice    *ebpf.VariableSpec `ebpf:"attr_type_boolslice"`
	AttrTypeFloat64      *ebpf.VariableSpec `ebpf:"attr_type_float64"`
	AttrTypeFloat64slice *ebpf.VariableSpec `ebpf:"attr_type_float64slice"`
	AttrTypeInt64        *ebpf.VariableSpec `ebpf:"attr_type_int64"`
	AttrTypeInt64slice   *ebpf.VariableSpec `ebpf:"attr_type_int64slice"`
	AttrTypeInvalid      *ebpf.VariableSpec `ebpf:"attr_type_invalid"`
	AttrTypeString       *ebpf.VariableSpec `ebpf:"attr_type_string"`
	AttrTypeStringslice  *ebpf.VariableSpec `ebpf:"attr_type_stringslice"`
	DisableBlackBoxCp    *ebpf.VariableSpec `ebpf:"disable_black_box_cp"`
	HuffmanCodeLen       *ebpf.VariableSpec `ebpf:"huffman_code_len"`
	HuffmanCodes         *ebpf.VariableSpec `ebpf:"huffman_codes"`
	Ip4ip6Prefix         *ebpf.VariableSpec `ebpf:"ip4ip6_prefix"`
	MysqlBufferSize      *ebpf.VariableSpec `ebpf:"mysql_buffer_size"`
	Unused               *ebpf.VariableSpec `ebpf:"unused"`
	UnusedHttp2          *ebpf.VariableSpec `ebpf:"unused_http2"`
	WakeupDataBytes      *ebpf.VariableSpec `ebpf:"wakeup_data_bytes"`
}

// BpfTPDebugObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadBpfTPDebugObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfTPDebugObjects struct {
	BpfTPDebugPrograms
	BpfTPDebugMaps
	BpfTPDebugVariables
}

func (o *BpfTPDebugObjects) Close() error {
	return _BpfTPDebugClose(
		&o.BpfTPDebugPrograms,
		&o.BpfTPDebugMaps,
	)
}

// BpfTPDebugMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadBpfTPDebugObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfTPDebugMaps struct {
	ActiveSpans                   *ebpf.Map `ebpf:"active_spans"`
	DebugEvents                   *ebpf.Map `ebpf:"debug_events"`
	Events                        *ebpf.Map `ebpf:"events"`
	FetchRequests                 *ebpf.Map `ebpf:"fetch_requests"`
	FramerInvocationMap           *ebpf.Map `ebpf:"framer_invocation_map"`
	GoOffsetsMap                  *ebpf.Map `ebpf:"go_offsets_map"`
	GoOngoingHttp                 *ebpf.Map `ebpf:"go_ongoing_http"`
	GoOngoingHttpClientRequests   *ebpf.Map `ebpf:"go_ongoing_http_client_requests"`
	GoTraceMap                    *ebpf.Map `ebpf:"go_trace_map"`
	GrpcFramerInvocationMap       *ebpf.Map `ebpf:"grpc_framer_invocation_map"`
	HeaderReqMap                  *ebpf.Map `ebpf:"header_req_map"`
	Http2ReqMap                   *ebpf.Map `ebpf:"http2_req_map"`
	Http2ServerRequestsTp         *ebpf.Map `ebpf:"http2_server_requests_tp"`
	IncomingTraceMap              *ebpf.Map `ebpf:"incoming_trace_map"`
	JsonrpcJumpTable              *ebpf.Map `ebpf:"jsonrpc_jump_table"`
	KafkaRequests                 *ebpf.Map `ebpf:"kafka_requests"`
	Newproc1                      *ebpf.Map `ebpf:"newproc1"`
	OngoingClientConnections      *ebpf.Map `ebpf:"ongoing_client_connections"`
	OngoingGoroutines             *ebpf.Map `ebpf:"ongoing_goroutines"`
	OngoingGrpcClientRequests     *ebpf.Map `ebpf:"ongoing_grpc_client_requests"`
	OngoingGrpcHeaderWrites       *ebpf.Map `ebpf:"ongoing_grpc_header_writes"`
	OngoingGrpcOperateHeaders     *ebpf.Map `ebpf:"ongoing_grpc_operate_headers"`
	OngoingGrpcRequestStatus      *ebpf.Map `ebpf:"ongoing_grpc_request_status"`
	OngoingGrpcServerRequests     *ebpf.Map `ebpf:"ongoing_grpc_server_requests"`
	OngoingGrpcTransports         *ebpf.Map `ebpf:"ongoing_grpc_transports"`
	OngoingHttpClientRequestsData *ebpf.Map `ebpf:"ongoing_http_client_requests_data"`
	OngoingHttpServerRequests     *ebpf.Map `ebpf:"ongoing_http_server_requests"`
	OngoingKafkaRequests          *ebpf.Map `ebpf:"ongoing_kafka_requests"`
	OngoingProduceMessages        *ebpf.Map `ebpf:"ongoing_produce_messages"`
	OngoingProduceTopics          *ebpf.Map `ebpf:"ongoing_produce_topics"`
	OngoingRedisRequests          *ebpf.Map `ebpf:"ongoing_redis_requests"`
	OngoingServerConnections      *ebpf.Map `ebpf:"ongoing_server_connections"`
	OngoingSqlQueries             *ebpf.Map `ebpf:"ongoing_sql_queries"`
	OngoingStreams                *ebpf.Map `ebpf:"ongoing_streams"`
	OutgoingTraceMap              *ebpf.Map `ebpf:"outgoing_trace_map"`
	ProduceRequests               *ebpf.Map `ebpf:"produce_requests"`
	ProduceTraceparents           *ebpf.Map `ebpf:"produce_traceparents"`
	RedisWrites                   *ebpf.Map `ebpf:"redis_writes"`
	SpanMem                       *ebpf.Map `ebpf:"span_mem"`
	SpanNames                     *ebpf.Map `ebpf:"span_names"`
	TempBodyMemStore              *ebpf.Map `ebpf:"temp_body_mem_store"`
	TempHeaderMemStore            *ebpf.Map `ebpf:"temp_header_mem_store"`
	TraceMap                      *ebpf.Map `ebpf:"trace_map"`
	TransportNewClientInvocations *ebpf.Map `ebpf:"transport_new_client_invocations"`
}

func (m *BpfTPDebugMaps) Close() error {
	return _BpfTPDebugClose(
		m.ActiveSpans,
		m.DebugEvents,
		m.Events,
		m.FetchRequests,
		m.FramerInvocationMap,
		m.GoOffsetsMap,
		m.GoOngoingHttp,
		m.GoOngoingHttpClientRequests,
		m.GoTraceMap,
		m.GrpcFramerInvocationMap,
		m.HeaderReqMap,
		m.Http2ReqMap,
		m.Http2ServerRequestsTp,
		m.IncomingTraceMap,
		m.JsonrpcJumpTable,
		m.KafkaRequests,
		m.Newproc1,
		m.OngoingClientConnections,
		m.OngoingGoroutines,
		m.OngoingGrpcClientRequests,
		m.OngoingGrpcHeaderWrites,
		m.OngoingGrpcOperateHeaders,
		m.OngoingGrpcRequestStatus,
		m.OngoingGrpcServerRequests,
		m.OngoingGrpcTransports,
		m.OngoingHttpClientRequestsData,
		m.OngoingHttpServerRequests,
		m.OngoingKafkaRequests,
		m.OngoingProduceMessages,
		m.OngoingProduceTopics,
		m.OngoingRedisRequests,
		m.OngoingServerConnections,
		m.OngoingSqlQueries,
		m.OngoingStreams,
		m.OutgoingTraceMap,
		m.ProduceRequests,
		m.ProduceTraceparents,
		m.RedisWrites,
		m.SpanMem,
		m.SpanNames,
		m.TempBodyMemStore,
		m.TempHeaderMemStore,
		m.TraceMap,
		m.TransportNewClientInvocations,
	)
}

// BpfTPDebugVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadBpfTPDebugObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfTPDebugVariables struct {
	ERROR_KEY            *ebpf.Variable `ebpf:"ERROR_KEY"`
	ERROR_KEY_SIZE       *ebpf.Variable `ebpf:"ERROR_KEY_SIZE"`
	EXTEND_SIZE          *ebpf.Variable `ebpf:"EXTEND_SIZE"`
	INVALID_POS          *ebpf.Variable `ebpf:"INVALID_POS"`
	TP                   *ebpf.Variable `ebpf:"TP"`
	TP_PREFIX            *ebpf.Variable `ebpf:"TP_PREFIX"`
	TP_PREFIX_SIZE       *ebpf.Variable `ebpf:"TP_PREFIX_SIZE"`
	AttrTypeBool         *ebpf.Variable `ebpf:"attr_type_bool"`
	AttrTypeBoolslice    *ebpf.Variable `ebpf:"attr_type_boolslice"`
	AttrTypeFloat64      *ebpf.Variable `ebpf:"attr_type_float64"`
	AttrTypeFloat64slice *ebpf.Variable `ebpf:"attr_type_float64slice"`
	AttrTypeInt64        *ebpf.Variable `ebpf:"attr_type_int64"`
	AttrTypeInt64slice   *ebpf.Variable `ebpf:"attr_type_int64slice"`
	AttrTypeInvalid      *ebpf.Variable `ebpf:"attr_type_invalid"`
	AttrTypeString       *ebpf.Variable `ebpf:"attr_type_string"`
	AttrTypeStringslice  *ebpf.Variable `ebpf:"attr_type_stringslice"`
	DisableBlackBoxCp    *ebpf.Variable `ebpf:"disable_black_box_cp"`
	HuffmanCodeLen       *ebpf.Variable `ebpf:"huffman_code_len"`
	HuffmanCodes         *ebpf.Variable `ebpf:"huffman_codes"`
	Ip4ip6Prefix         *ebpf.Variable `ebpf:"ip4ip6_prefix"`
	MysqlBufferSize      *ebpf.Variable `ebpf:"mysql_buffer_size"`
	Unused               *ebpf.Variable `ebpf:"unused"`
	UnusedHttp2          *ebpf.Variable `ebpf:"unused_http2"`
	WakeupDataBytes      *ebpf.Variable `ebpf:"wakeup_data_bytes"`
}

// BpfTPDebugPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadBpfTPDebugObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfTPDebugPrograms struct {
	BeylaReadJsonrpcMethod                          *ebpf.Program `ebpf:"beyla_read_jsonrpc_method"`
	BeylaUprobeClientConnClose                      *ebpf.Program `ebpf:"beyla_uprobe_ClientConn_Close"`
	BeylaUprobeClientConnInvoke                     *ebpf.Program `ebpf:"beyla_uprobe_ClientConn_Invoke"`
	BeylaUprobeClientConnInvokeReturn               *ebpf.Program `ebpf:"beyla_uprobe_ClientConn_Invoke_return"`
	BeylaUprobeClientConnNewStream                  *ebpf.Program `ebpf:"beyla_uprobe_ClientConn_NewStream"`
	BeylaUprobeClientConnNewStreamReturn            *ebpf.Program `ebpf:"beyla_uprobe_ClientConn_NewStream_return"`
	BeylaUprobeRecordError                          *ebpf.Program `ebpf:"beyla_uprobe_RecordError"`
	BeylaUprobeServeHTTP                            *ebpf.Program `ebpf:"beyla_uprobe_ServeHTTP"`
	BeylaUprobeServeHTTPReturns                     *ebpf.Program `ebpf:"beyla_uprobe_ServeHTTPReturns"`
	BeylaUprobeSetAttributes                        *ebpf.Program `ebpf:"beyla_uprobe_SetAttributes"`
	BeylaUprobeSetName                              *ebpf.Program `ebpf:"beyla_uprobe_SetName"`
	BeylaUprobeSetStatus                            *ebpf.Program `ebpf:"beyla_uprobe_SetStatus"`
	BeylaUprobeBodyRead                             *ebpf.Program `ebpf:"beyla_uprobe_bodyRead"`
	BeylaUprobeBodyReadReturn                       *ebpf.Program `ebpf:"beyla_uprobe_bodyReadReturn"`
	BeylaUprobeClientStreamRecvMsgReturn            *ebpf.Program `ebpf:"beyla_uprobe_clientStream_RecvMsg_return"`
	BeylaUprobeClientRoundTrip                      *ebpf.Program `ebpf:"beyla_uprobe_client_roundTrip"`
	BeylaUprobeConnServe                            *ebpf.Program `ebpf:"beyla_uprobe_connServe"`
	BeylaUprobeConnServeRet                         *ebpf.Program `ebpf:"beyla_uprobe_connServeRet"`
	BeylaUprobeExecDC                               *ebpf.Program `ebpf:"beyla_uprobe_execDC"`
	BeylaUprobeGrpcFramerWriteHeaders               *ebpf.Program `ebpf:"beyla_uprobe_grpcFramerWriteHeaders"`
	BeylaUprobeGrpcFramerWriteHeadersReturns        *ebpf.Program `ebpf:"beyla_uprobe_grpcFramerWriteHeaders_returns"`
	BeylaUprobeHttp2FramerWriteHeaders              *ebpf.Program `ebpf:"beyla_uprobe_http2FramerWriteHeaders"`
	BeylaUprobeHttp2FramerWriteHeadersReturns       *ebpf.Program `ebpf:"beyla_uprobe_http2FramerWriteHeaders_returns"`
	BeylaUprobeHttp2ResponseWriterStateWriteHeader  *ebpf.Program `ebpf:"beyla_uprobe_http2ResponseWriterStateWriteHeader"`
	BeylaUprobeHttp2RoundTrip                       *ebpf.Program `ebpf:"beyla_uprobe_http2RoundTrip"`
	BeylaUprobeHttp2ServerOperateHeaders            *ebpf.Program `ebpf:"beyla_uprobe_http2Server_operateHeaders"`
	BeylaUprobeHttp2ServerProcessHeaders            *ebpf.Program `ebpf:"beyla_uprobe_http2Server_processHeaders"`
	BeylaUprobeHttp2WriteHeaders                    *ebpf.Program `ebpf:"beyla_uprobe_http2WriteHeaders"`
	BeylaUprobeHttp2WriteHeadersVendored            *ebpf.Program `ebpf:"beyla_uprobe_http2WriteHeaders_vendored"`
	BeylaUprobeHttp2serverConnRunHandler            *ebpf.Program `ebpf:"beyla_uprobe_http2serverConn_runHandler"`
	BeylaUprobeNetFdRead                            *ebpf.Program `ebpf:"beyla_uprobe_netFdRead"`
	BeylaUprobeNonRecordingSpanEnd                  *ebpf.Program `ebpf:"beyla_uprobe_nonRecordingSpan_End"`
	BeylaUprobePersistConnRoundTrip                 *ebpf.Program `ebpf:"beyla_uprobe_persistConnRoundTrip"`
	BeylaUprobeProcGoexit1                          *ebpf.Program `ebpf:"beyla_uprobe_proc_goexit1"`
	BeylaUprobeProcNewproc1                         *ebpf.Program `ebpf:"beyla_uprobe_proc_newproc1"`
	BeylaUprobeProcNewproc1Ret                      *ebpf.Program `ebpf:"beyla_uprobe_proc_newproc1_ret"`
	BeylaUprobeProtocolRoundtrip                    *ebpf.Program `ebpf:"beyla_uprobe_protocol_roundtrip"`
	BeylaUprobeProtocolRoundtripRet                 *ebpf.Program `ebpf:"beyla_uprobe_protocol_roundtrip_ret"`
	BeylaUprobeQueryDC                              *ebpf.Program `ebpf:"beyla_uprobe_queryDC"`
	BeylaUprobeQueryReturn                          *ebpf.Program `ebpf:"beyla_uprobe_queryReturn"`
	BeylaUprobeReadContinuedLineSliceReturns        *ebpf.Program `ebpf:"beyla_uprobe_readContinuedLineSliceReturns"`
	BeylaUprobeReadRequestReturns                   *ebpf.Program `ebpf:"beyla_uprobe_readRequestReturns"`
	BeylaUprobeReadRequestStart                     *ebpf.Program `ebpf:"beyla_uprobe_readRequestStart"`
	BeylaUprobeReaderRead                           *ebpf.Program `ebpf:"beyla_uprobe_reader_read"`
	BeylaUprobeReaderReadRet                        *ebpf.Program `ebpf:"beyla_uprobe_reader_read_ret"`
	BeylaUprobeReaderSendMessage                    *ebpf.Program `ebpf:"beyla_uprobe_reader_send_message"`
	BeylaUprobeRedisProcess                         *ebpf.Program `ebpf:"beyla_uprobe_redis_process"`
	BeylaUprobeRedisProcessRet                      *ebpf.Program `ebpf:"beyla_uprobe_redis_process_ret"`
	BeylaUprobeRedisWithWriter                      *ebpf.Program `ebpf:"beyla_uprobe_redis_with_writer"`
	BeylaUprobeRedisWithWriterRet                   *ebpf.Program `ebpf:"beyla_uprobe_redis_with_writer_ret"`
	BeylaUprobeRoundTrip                            *ebpf.Program `ebpf:"beyla_uprobe_roundTrip"`
	BeylaUprobeRoundTripReturn                      *ebpf.Program `ebpf:"beyla_uprobe_roundTripReturn"`
	BeylaUprobeSaramaBrokerWrite                    *ebpf.Program `ebpf:"beyla_uprobe_sarama_broker_write"`
	BeylaUprobeSaramaResponsePromiseHandle          *ebpf.Program `ebpf:"beyla_uprobe_sarama_response_promise_handle"`
	BeylaUprobeSaramaSendInternal                   *ebpf.Program `ebpf:"beyla_uprobe_sarama_sendInternal"`
	BeylaUprobeServerHandleStream                   *ebpf.Program `ebpf:"beyla_uprobe_server_handleStream"`
	BeylaUprobeServerHandleStreamReturn             *ebpf.Program `ebpf:"beyla_uprobe_server_handleStream_return"`
	BeylaUprobeServerHandlerTransportHandleStreams  *ebpf.Program `ebpf:"beyla_uprobe_server_handler_transport_handle_streams"`
	BeylaUprobeTracerStart                          *ebpf.Program `ebpf:"beyla_uprobe_tracer_Start"`
	BeylaUprobeTracerStartReturns                   *ebpf.Program `ebpf:"beyla_uprobe_tracer_Start_Returns"`
	BeylaUprobeTracerStartGlobal                    *ebpf.Program `ebpf:"beyla_uprobe_tracer_Start_global"`
	BeylaUprobeTransportHttp2ClientNewStream        *ebpf.Program `ebpf:"beyla_uprobe_transport_http2Client_NewStream"`
	BeylaUprobeTransportHttp2ClientNewStreamReturns *ebpf.Program `ebpf:"beyla_uprobe_transport_http2Client_NewStream_Returns"`
	BeylaUprobeTransportWriteStatus                 *ebpf.Program `ebpf:"beyla_uprobe_transport_writeStatus"`
	BeylaUprobeWriteSubset                          *ebpf.Program `ebpf:"beyla_uprobe_writeSubset"`
	BeylaUprobeWriterProduce                        *ebpf.Program `ebpf:"beyla_uprobe_writer_produce"`
	BeylaUprobeWriterWriteMessages                  *ebpf.Program `ebpf:"beyla_uprobe_writer_write_messages"`
}

func (p *BpfTPDebugPrograms) Close() error {
	return _BpfTPDebugClose(
		p.BeylaReadJsonrpcMethod,
		p.BeylaUprobeClientConnClose,
		p.BeylaUprobeClientConnInvoke,
		p.BeylaUprobeClientConnInvokeReturn,
		p.BeylaUprobeClientConnNewStream,
		p.BeylaUprobeClientConnNewStreamReturn,
		p.BeylaUprobeRecordError,
		p.BeylaUprobeServeHTTP,
		p.BeylaUprobeServeHTTPReturns,
		p.BeylaUprobeSetAttributes,
		p.BeylaUprobeSetName,
		p.BeylaUprobeSetStatus,
		p.BeylaUprobeBodyRead,
		p.BeylaUprobeBodyReadReturn,
		p.BeylaUprobeClientStreamRecvMsgReturn,
		p.BeylaUprobeClientRoundTrip,
		p.BeylaUprobeConnServe,
		p.BeylaUprobeConnServeRet,
		p.BeylaUprobeExecDC,
		p.BeylaUprobeGrpcFramerWriteHeaders,
		p.BeylaUprobeGrpcFramerWriteHeadersReturns,
		p.BeylaUprobeHttp2FramerWriteHeaders,
		p.BeylaUprobeHttp2FramerWriteHeadersReturns,
		p.BeylaUprobeHttp2ResponseWriterStateWriteHeader,
		p.BeylaUprobeHttp2RoundTrip,
		p.BeylaUprobeHttp2ServerOperateHeaders,
		p.BeylaUprobeHttp2ServerProcessHeaders,
		p.BeylaUprobeHttp2WriteHeaders,
		p.BeylaUprobeHttp2WriteHeadersVendored,
		p.BeylaUprobeHttp2serverConnRunHandler,
		p.BeylaUprobeNetFdRead,
		p.BeylaUprobeNonRecordingSpanEnd,
		p.BeylaUprobePersistConnRoundTrip,
		p.BeylaUprobeProcGoexit1,
		p.BeylaUprobeProcNewproc1,
		p.BeylaUprobeProcNewproc1Ret,
		p.BeylaUprobeProtocolRoundtrip,
		p.BeylaUprobeProtocolRoundtripRet,
		p.BeylaUprobeQueryDC,
		p.BeylaUprobeQueryReturn,
		p.BeylaUprobeReadContinuedLineSliceReturns,
		p.BeylaUprobeReadRequestReturns,
		p.BeylaUprobeReadRequestStart,
		p.BeylaUprobeReaderRead,
		p.BeylaUprobeReaderReadRet,
		p.BeylaUprobeReaderSendMessage,
		p.BeylaUprobeRedisProcess,
		p.BeylaUprobeRedisProcessRet,
		p.BeylaUprobeRedisWithWriter,
		p.BeylaUprobeRedisWithWriterRet,
		p.BeylaUprobeRoundTrip,
		p.BeylaUprobeRoundTripReturn,
		p.BeylaUprobeSaramaBrokerWrite,
		p.BeylaUprobeSaramaResponsePromiseHandle,
		p.BeylaUprobeSaramaSendInternal,
		p.BeylaUprobeServerHandleStream,
		p.BeylaUprobeServerHandleStreamReturn,
		p.BeylaUprobeServerHandlerTransportHandleStreams,
		p.BeylaUprobeTracerStart,
		p.BeylaUprobeTracerStartReturns,
		p.BeylaUprobeTracerStartGlobal,
		p.BeylaUprobeTransportHttp2ClientNewStream,
		p.BeylaUprobeTransportHttp2ClientNewStreamReturns,
		p.BeylaUprobeTransportWriteStatus,
		p.BeylaUprobeWriteSubset,
		p.BeylaUprobeWriterProduce,
		p.BeylaUprobeWriterWriteMessages,
	)
}

func _BpfTPDebugClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpftpdebug_arm64_bpfel.o
var _BpfTPDebugBytes []byte
